ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"tasks.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvTaskIsTaskSuspended:
  23              	.LFB9:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 13


 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 14


 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 15


 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 16


 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 17


 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 18


 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 19


1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 20


1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 21


1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 22


1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 23


1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 24


1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 25


1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 26


1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 27


1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 28


1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 29


1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 30


1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  25              		.loc 1 1657 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  31              		.loc 1 1665 0
  32 0000 0028     		cmp	r0, #0
  33 0002 11D0     		beq	.L12
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  34              		.loc 1 1668 0
  35 0004 0D4B     		ldr	r3, .L15
  36 0006 4269     		ldr	r2, [r0, #20]
  37 0008 9A42     		cmp	r2, r3
  38 000a 0FD0     		beq	.L13
  39 000c 0023     		movs	r3, #0
  40              	.L4:
  41              		.loc 1 1668 0 is_stmt 0 discriminator 4
  42 000e 002B     		cmp	r3, #0
  43 0010 10D0     		beq	.L8
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 31


1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  44              		.loc 1 1671 0 is_stmt 1
  45 0012 826A     		ldr	r2, [r0, #40]
  46 0014 0A49     		ldr	r1, .L15+4
  47 0016 8A42     		cmp	r2, r1
  48 0018 0ED0     		beq	.L9
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  49              		.loc 1 1675 0
  50 001a 002A     		cmp	r2, #0
  51 001c 00D0     		beq	.L6
  52 001e 0023     		movs	r3, #0
  53              	.L6:
  54              		.loc 1 1675 0 is_stmt 0 discriminator 4
  55 0020 002B     		cmp	r3, #0
  56 0022 05D0     		beq	.L14
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  57              		.loc 1 1677 0 is_stmt 1
  58 0024 0120     		movs	r0, #1
  59              	.LVL1:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
  60              		.loc 1 1694 0
  61 0026 06E0     		b	.L1
  62              	.LVL2:
  63              	.L12:
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  64              		.loc 1 1665 0 discriminator 1
  65              		.syntax divided
  66              	@ 1665 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
  67 0028 72B6     		 cpsid i 
  68              	@ 0 "" 2
  69              		.thumb
  70              		.syntax unified
  71              	.L3:
  72 002a FEE7     		b	.L3
  73              	.L13:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 32


1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
  74              		.loc 1 1668 0
  75 002c 0123     		movs	r3, #1
  76 002e EEE7     		b	.L4
  77              	.L14:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  78              		.loc 1 1658 0
  79 0030 0020     		movs	r0, #0
  80              	.LVL3:
  81 0032 00E0     		b	.L1
  82              	.LVL4:
  83              	.L8:
  84 0034 0020     		movs	r0, #0
  85              	.LVL5:
  86              	.L1:
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  87              		.loc 1 1695 0
  88              		@ sp needed
  89 0036 7047     		bx	lr
  90              	.LVL6:
  91              	.L9:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  92              		.loc 1 1658 0
  93 0038 0020     		movs	r0, #0
  94              	.LVL7:
  95 003a FCE7     		b	.L1
  96              	.L16:
  97              		.align	2
  98              	.L15:
  99 003c 00000000 		.word	.LANCHOR0
 100 0040 00000000 		.word	.LANCHOR1
 101              		.cfi_endproc
 102              	.LFE9:
 104              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 105              		.align	1
 106              		.syntax unified
 107              		.code	16
 108              		.thumb_func
 109              		.fpu softvfp
 111              	prvResetNextTaskUnblockTime:
 112              	.LFB33:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 33


1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 34


1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 35


1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 36


1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 37


1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 38


1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 39


2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 40


2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 41


2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 42


2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 43


2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 44


2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 45


2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 46


2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 47


2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 48


2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 49


2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 50


2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 51


2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 52


2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 53


2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 54


2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 55


2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 56


3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 57


3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 58


3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 59


3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 60


3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 61


3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 62


3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 63


3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 64


3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 65


3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 66


3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 113              		.loc 1 3636 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 118              		.loc 1 3639 0
 119 0000 0B4B     		ldr	r3, .L23
 120 0002 1B68     		ldr	r3, [r3]
 121 0004 1B68     		ldr	r3, [r3]
 122 0006 002B     		cmp	r3, #0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 67


 123 0008 0AD1     		bne	.L21
 124 000a 0133     		adds	r3, r3, #1
 125              	.L18:
 126              		.loc 1 3639 0 is_stmt 0 discriminator 4
 127 000c 002B     		cmp	r3, #0
 128 000e 09D1     		bne	.L22
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 129              		.loc 1 3653 0 is_stmt 1
 130 0010 074B     		ldr	r3, .L23
 131 0012 1B68     		ldr	r3, [r3]
 132 0014 DB68     		ldr	r3, [r3, #12]
 133 0016 DB68     		ldr	r3, [r3, #12]
 134              	.LVL8:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 135              		.loc 1 3654 0
 136 0018 5A68     		ldr	r2, [r3, #4]
 137 001a 064B     		ldr	r3, .L23+4
 138              	.LVL9:
 139 001c 1A60     		str	r2, [r3]
 140              	.L17:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 141              		.loc 1 3656 0
 142              		@ sp needed
 143 001e 7047     		bx	lr
 144              	.L21:
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 145              		.loc 1 3639 0
 146 0020 0023     		movs	r3, #0
 147 0022 F3E7     		b	.L18
 148              	.L22:
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 149              		.loc 1 3645 0
 150 0024 0122     		movs	r2, #1
 151 0026 5242     		rsbs	r2, r2, #0
 152 0028 024B     		ldr	r3, .L23+4
 153 002a 1A60     		str	r2, [r3]
 154 002c F7E7     		b	.L17
 155              	.L24:
 156 002e C046     		.align	2
 157              	.L23:
 158 0030 00000000 		.word	.LANCHOR2
 159 0034 00000000 		.word	.LANCHOR3
 160              		.cfi_endproc
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 68


 161              	.LFE33:
 163              		.section	.text.prvDeleteTCB,"ax",%progbits
 164              		.align	1
 165              		.syntax unified
 166              		.code	16
 167              		.thumb_func
 168              		.fpu softvfp
 170              	prvDeleteTCB:
 171              	.LFB32:
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 172              		.loc 1 3582 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              	.LVL10:
 177 0000 10B5     		push	{r4, lr}
 178              	.LCFI0:
 179              		.cfi_def_cfa_offset 8
 180              		.cfi_offset 4, -8
 181              		.cfi_offset 14, -4
 182 0002 0400     		movs	r4, r0
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 183              		.loc 1 3600 0
 184 0004 006B     		ldr	r0, [r0, #48]
 185              	.LVL11:
 186 0006 FFF7FEFF 		bl	vPortFree
 187              	.LVL12:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 188              		.loc 1 3601 0
 189 000a 2000     		movs	r0, r4
 190 000c FFF7FEFF 		bl	vPortFree
 191              	.LVL13:
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192              		.loc 1 3630 0
 193              		@ sp needed
 194              	.LVL14:
 195 0010 10BD     		pop	{r4, pc}
 196              		.cfi_endproc
 197              	.LFE32:
 199              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 200              		.align	1
 201              		.syntax unified
 202              		.code	16
 203              		.thumb_func
 204              		.fpu softvfp
 206              	prvInitialiseNewTask:
 207              	.LFB1:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 208              		.loc 1 775 0
 209              		.cfi_startproc
 210              		@ args = 16, pretend = 0, frame = 8
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              	.LVL15:
 213 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 214              	.LCFI1:
 215              		.cfi_def_cfa_offset 20
 216              		.cfi_offset 4, -20
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 69


 217              		.cfi_offset 5, -16
 218              		.cfi_offset 6, -12
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 83B0     		sub	sp, sp, #12
 222              	.LCFI2:
 223              		.cfi_def_cfa_offset 32
 224 0004 0090     		str	r0, [sp]
 225 0006 0193     		str	r3, [sp, #4]
 226 0008 089C     		ldr	r4, [sp, #32]
 227 000a 0A9E     		ldr	r6, [sp, #40]
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 228              		.loc 1 807 0
 229 000c 1D4B     		ldr	r3, .L33
 230              	.LVL16:
 231 000e 9C46     		mov	ip, r3
 232 0010 6244     		add	r2, r2, ip
 233              	.LVL17:
 234 0012 9200     		lsls	r2, r2, #2
 235              	.LVL18:
 236 0014 336B     		ldr	r3, [r6, #48]
 237 0016 9C46     		mov	ip, r3
 238 0018 6244     		add	r2, r2, ip
 239              	.LVL19:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 240              		.loc 1 808 0
 241 001a 0723     		movs	r3, #7
 242 001c 9A43     		bics	r2, r3
 243              	.LVL20:
 244 001e 1700     		movs	r7, r2
 245              	.LVL21:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 246              		.loc 1 827 0
 247 0020 0023     		movs	r3, #0
 248              	.LVL22:
 249              	.L27:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 250              		.loc 1 827 0 is_stmt 0 discriminator 1
 251 0022 0F2B     		cmp	r3, #15
 252 0024 09D8     		bhi	.L28
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253              		.loc 1 829 0 is_stmt 1
 254 0026 C818     		adds	r0, r1, r3
 255 0028 0578     		ldrb	r5, [r0]
 256 002a F218     		adds	r2, r6, r3
 257 002c 3432     		adds	r2, r2, #52
 258 002e 1570     		strb	r5, [r2]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 259              		.loc 1 834 0
 260 0030 0278     		ldrb	r2, [r0]
 261 0032 002A     		cmp	r2, #0
 262 0034 01D0     		beq	.L28
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 263              		.loc 1 827 0 discriminator 2
 264 0036 0133     		adds	r3, r3, #1
 265              	.LVL23:
 266 0038 F3E7     		b	.L27
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 70


 267              	.L28:
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 268              		.loc 1 846 0
 269 003a 0022     		movs	r2, #0
 270 003c 4323     		movs	r3, #67
 271              	.LVL24:
 272 003e F254     		strb	r2, [r6, r3]
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 273              		.loc 1 850 0
 274 0040 062C     		cmp	r4, #6
 275 0042 00D9     		bls	.L30
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 276              		.loc 1 852 0
 277 0044 0624     		movs	r4, #6
 278              	.L30:
 279              	.LVL25:
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280              		.loc 1 859 0
 281 0046 F462     		str	r4, [r6, #44]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 282              		.loc 1 862 0
 283 0048 7464     		str	r4, [r6, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 284              		.loc 1 863 0
 285 004a 0025     		movs	r5, #0
 286 004c B564     		str	r5, [r6, #72]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 287              		.loc 1 867 0
 288 004e 301D     		adds	r0, r6, #4
 289 0050 FFF7FEFF 		bl	vListInitialiseItem
 290              	.LVL26:
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291              		.loc 1 868 0
 292 0054 3000     		movs	r0, r6
 293 0056 1830     		adds	r0, r0, #24
 294 0058 FFF7FEFF 		bl	vListInitialiseItem
 295              	.LVL27:
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296              		.loc 1 872 0
 297 005c 3661     		str	r6, [r6, #16]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 298              		.loc 1 875 0
 299 005e 0723     		movs	r3, #7
 300 0060 1C1B     		subs	r4, r3, r4
 301              	.LVL28:
 302 0062 B461     		str	r4, [r6, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 303              		.loc 1 876 0
 304 0064 7662     		str	r6, [r6, #36]
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 305              		.loc 1 918 0
 306 0066 F564     		str	r5, [r6, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 307              		.loc 1 919 0
 308 0068 4933     		adds	r3, r3, #73
 309 006a F554     		strb	r5, [r6, r3]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 71


 310              		.loc 1 946 0
 311 006c 019A     		ldr	r2, [sp, #4]
 312 006e 0099     		ldr	r1, [sp]
 313 0070 3800     		movs	r0, r7
 314 0072 FFF7FEFF 		bl	pxPortInitialiseStack
 315              	.LVL29:
 316 0076 3060     		str	r0, [r6]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 317              		.loc 1 950 0
 318 0078 099B     		ldr	r3, [sp, #36]
 319 007a 002B     		cmp	r3, #0
 320 007c 00D0     		beq	.L26
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 321              		.loc 1 954 0
 322 007e 1E60     		str	r6, [r3]
 323              	.L26:
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 324              		.loc 1 960 0
 325 0080 03B0     		add	sp, sp, #12
 326              	.LVL30:
 327              		@ sp needed
 328              	.LVL31:
 329 0082 F0BD     		pop	{r4, r5, r6, r7, pc}
 330              	.L34:
 331              		.align	2
 332              	.L33:
 333 0084 FFFFFF3F 		.word	1073741823
 334              		.cfi_endproc
 335              	.LFE1:
 337              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 338              		.align	1
 339              		.syntax unified
 340              		.code	16
 341              		.thumb_func
 342              		.fpu softvfp
 344              	prvInitialiseTaskLists:
 345              	.LFB30:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 346              		.loc 1 3334 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350 0000 70B5     		push	{r4, r5, r6, lr}
 351              	.LCFI3:
 352              		.cfi_def_cfa_offset 16
 353              		.cfi_offset 4, -16
 354              		.cfi_offset 5, -12
 355              		.cfi_offset 6, -8
 356              		.cfi_offset 14, -4
 357              	.LVL32:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 358              		.loc 1 3337 0
 359 0002 0024     		movs	r4, #0
 360 0004 07E0     		b	.L36
 361              	.LVL33:
 362              	.L37:
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 72


 363              		.loc 1 3339 0 discriminator 3
 364 0006 A300     		lsls	r3, r4, #2
 365 0008 1B19     		adds	r3, r3, r4
 366 000a 9A00     		lsls	r2, r3, #2
 367 000c 0E48     		ldr	r0, .L38
 368 000e 8018     		adds	r0, r0, r2
 369 0010 FFF7FEFF 		bl	vListInitialise
 370              	.LVL34:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 371              		.loc 1 3337 0 discriminator 3
 372 0014 0134     		adds	r4, r4, #1
 373              	.LVL35:
 374              	.L36:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 375              		.loc 1 3337 0 is_stmt 0 discriminator 1
 376 0016 062C     		cmp	r4, #6
 377 0018 F5D9     		bls	.L37
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 378              		.loc 1 3342 0 is_stmt 1
 379 001a 0C4D     		ldr	r5, .L38+4
 380 001c 2800     		movs	r0, r5
 381 001e FFF7FEFF 		bl	vListInitialise
 382              	.LVL36:
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 383              		.loc 1 3343 0
 384 0022 0B4C     		ldr	r4, .L38+8
 385              	.LVL37:
 386 0024 2000     		movs	r0, r4
 387 0026 FFF7FEFF 		bl	vListInitialise
 388              	.LVL38:
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389              		.loc 1 3344 0
 390 002a 0A48     		ldr	r0, .L38+12
 391 002c FFF7FEFF 		bl	vListInitialise
 392              	.LVL39:
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 393              		.loc 1 3348 0
 394 0030 0948     		ldr	r0, .L38+16
 395 0032 FFF7FEFF 		bl	vListInitialise
 396              	.LVL40:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 397              		.loc 1 3354 0
 398 0036 0948     		ldr	r0, .L38+20
 399 0038 FFF7FEFF 		bl	vListInitialise
 400              	.LVL41:
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 401              		.loc 1 3360 0
 402 003c 084B     		ldr	r3, .L38+24
 403 003e 1D60     		str	r5, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 404              		.loc 1 3361 0
 405 0040 084B     		ldr	r3, .L38+28
 406 0042 1C60     		str	r4, [r3]
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 407              		.loc 1 3362 0
 408              		@ sp needed
 409 0044 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 73


 410              	.L39:
 411 0046 C046     		.align	2
 412              	.L38:
 413 0048 00000000 		.word	.LANCHOR4
 414 004c 00000000 		.word	.LANCHOR5
 415 0050 00000000 		.word	.LANCHOR6
 416 0054 00000000 		.word	.LANCHOR1
 417 0058 00000000 		.word	.LANCHOR7
 418 005c 00000000 		.word	.LANCHOR0
 419 0060 00000000 		.word	.LANCHOR2
 420 0064 00000000 		.word	.LANCHOR8
 421              		.cfi_endproc
 422              	.LFE30:
 424              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 425              		.align	1
 426              		.syntax unified
 427              		.code	16
 428              		.thumb_func
 429              		.fpu softvfp
 431              	prvAddNewTaskToReadyList:
 432              	.LFB2:
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 433              		.loc 1 964 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              	.LVL42:
 438 0000 10B5     		push	{r4, lr}
 439              	.LCFI4:
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 4, -8
 442              		.cfi_offset 14, -4
 443 0002 0400     		movs	r4, r0
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 444              		.loc 1 967 0
 445 0004 FFF7FEFF 		bl	vPortEnterCritical
 446              	.LVL43:
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 447              		.loc 1 969 0
 448 0008 1F4A     		ldr	r2, .L47
 449 000a 1368     		ldr	r3, [r2]
 450 000c 0133     		adds	r3, r3, #1
 451 000e 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 452              		.loc 1 970 0
 453 0010 1E4B     		ldr	r3, .L47+4
 454 0012 1B68     		ldr	r3, [r3]
 455 0014 002B     		cmp	r3, #0
 456 0016 2BD0     		beq	.L45
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 457              		.loc 1 993 0
 458 0018 1D4B     		ldr	r3, .L47+8
 459 001a 1B68     		ldr	r3, [r3]
 460 001c 002B     		cmp	r3, #0
 461 001e 07D1     		bne	.L42
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 462              		.loc 1 995 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 74


 463 0020 1A4B     		ldr	r3, .L47+4
 464 0022 1B68     		ldr	r3, [r3]
 465 0024 DB6A     		ldr	r3, [r3, #44]
 466 0026 E26A     		ldr	r2, [r4, #44]
 467 0028 9342     		cmp	r3, r2
 468 002a 01D8     		bhi	.L42
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 469              		.loc 1 997 0
 470 002c 174B     		ldr	r3, .L47+4
 471 002e 1C60     		str	r4, [r3]
 472              	.L42:
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 473              		.loc 1 1010 0
 474 0030 184A     		ldr	r2, .L47+12
 475 0032 1368     		ldr	r3, [r2]
 476 0034 0133     		adds	r3, r3, #1
 477 0036 1360     		str	r3, [r2]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478              		.loc 1 1020 0
 479 0038 E26A     		ldr	r2, [r4, #44]
 480 003a 174B     		ldr	r3, .L47+16
 481 003c 1B68     		ldr	r3, [r3]
 482 003e 9A42     		cmp	r2, r3
 483 0040 01D9     		bls	.L43
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484              		.loc 1 1020 0 is_stmt 0 discriminator 1
 485 0042 154B     		ldr	r3, .L47+16
 486 0044 1A60     		str	r2, [r3]
 487              	.L43:
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488              		.loc 1 1020 0 discriminator 3
 489 0046 211D     		adds	r1, r4, #4
 490 0048 9300     		lsls	r3, r2, #2
 491 004a 9B18     		adds	r3, r3, r2
 492 004c 9A00     		lsls	r2, r3, #2
 493 004e 1348     		ldr	r0, .L47+20
 494 0050 8018     		adds	r0, r0, r2
 495 0052 FFF7FEFF 		bl	vListInsertEnd
 496              	.LVL44:
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497              		.loc 1 1024 0 is_stmt 1 discriminator 3
 498 0056 FFF7FEFF 		bl	vPortExitCritical
 499              	.LVL45:
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 500              		.loc 1 1026 0 discriminator 3
 501 005a 0D4B     		ldr	r3, .L47+8
 502 005c 1B68     		ldr	r3, [r3]
 503 005e 002B     		cmp	r3, #0
 504 0060 05D0     		beq	.L40
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 505              		.loc 1 1030 0
 506 0062 0A4B     		ldr	r3, .L47+4
 507 0064 1B68     		ldr	r3, [r3]
 508 0066 DA6A     		ldr	r2, [r3, #44]
 509 0068 E36A     		ldr	r3, [r4, #44]
 510 006a 9A42     		cmp	r2, r3
 511 006c 08D3     		bcc	.L46
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 75


 512              	.L40:
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 513              		.loc 1 1043 0
 514              		@ sp needed
 515              	.LVL46:
 516 006e 10BD     		pop	{r4, pc}
 517              	.LVL47:
 518              	.L45:
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519              		.loc 1 974 0
 520 0070 064B     		ldr	r3, .L47+4
 521 0072 1C60     		str	r4, [r3]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 522              		.loc 1 976 0
 523 0074 1368     		ldr	r3, [r2]
 524 0076 012B     		cmp	r3, #1
 525 0078 DAD1     		bne	.L42
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 526              		.loc 1 981 0
 527 007a FFF7FEFF 		bl	prvInitialiseTaskLists
 528              	.LVL48:
 529 007e D7E7     		b	.L42
 530              	.L46:
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 531              		.loc 1 1032 0
 532 0080 FFF7FEFF 		bl	vPortYield
 533              	.LVL49:
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 534              		.loc 1 1043 0
 535 0084 F3E7     		b	.L40
 536              	.L48:
 537 0086 C046     		.align	2
 538              	.L47:
 539 0088 00000000 		.word	.LANCHOR9
 540 008c 00000000 		.word	.LANCHOR10
 541 0090 00000000 		.word	.LANCHOR11
 542 0094 00000000 		.word	.LANCHOR12
 543 0098 00000000 		.word	.LANCHOR13
 544 009c 00000000 		.word	.LANCHOR4
 545              		.cfi_endproc
 546              	.LFE2:
 548              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 549              		.align	1
 550              		.syntax unified
 551              		.code	16
 552              		.thumb_func
 553              		.fpu softvfp
 555              	prvAddCurrentTaskToDelayedList:
 556              	.LFB46:
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 76


3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 77


3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 78


3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 79


3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 80


3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 81


3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 82


4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 83


4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 84


4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 85


4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 86


4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 87


4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 88


4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 89


4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 90


4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 91


4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 92


4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 93


4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 94


4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 557              		.loc 1 4693 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              	.LVL50:
 562 0000 70B5     		push	{r4, r5, r6, lr}
 563              	.LCFI5:
 564              		.cfi_def_cfa_offset 16
 565              		.cfi_offset 4, -16
 566              		.cfi_offset 5, -12
 567              		.cfi_offset 6, -8
 568              		.cfi_offset 14, -4
 569 0002 0400     		movs	r4, r0
 570 0004 0D00     		movs	r5, r1
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 571              		.loc 1 4695 0
 572 0006 174B     		ldr	r3, .L55
 573 0008 1E68     		ldr	r6, [r3]
 574              	.LVL51:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 575              		.loc 1 4708 0
 576 000a 174B     		ldr	r3, .L55+4
 577 000c 1868     		ldr	r0, [r3]
 578              	.LVL52:
 579 000e 0430     		adds	r0, r0, #4
 580 0010 FFF7FEFF 		bl	uxListRemove
 581              	.LVL53:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 582              		.loc 1 4721 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 95


 583 0014 631C     		adds	r3, r4, #1
 584 0016 13D0     		beq	.L53
 585              	.L50:
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 586              		.loc 1 4733 0
 587 0018 3419     		adds	r4, r6, r4
 588              	.LVL54:
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 589              		.loc 1 4736 0
 590 001a 134B     		ldr	r3, .L55+4
 591 001c 1B68     		ldr	r3, [r3]
 592 001e 5C60     		str	r4, [r3, #4]
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 593              		.loc 1 4738 0
 594 0020 A642     		cmp	r6, r4
 595 0022 16D8     		bhi	.L54
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 596              		.loc 1 4748 0
 597 0024 114B     		ldr	r3, .L55+8
 598 0026 1868     		ldr	r0, [r3]
 599 0028 0F4B     		ldr	r3, .L55+4
 600 002a 1968     		ldr	r1, [r3]
 601 002c 0431     		adds	r1, r1, #4
 602 002e FFF7FEFF 		bl	vListInsert
 603              	.LVL55:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 604              		.loc 1 4753 0
 605 0032 0F4B     		ldr	r3, .L55+12
 606 0034 1B68     		ldr	r3, [r3]
 607 0036 9C42     		cmp	r4, r3
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 96


 608 0038 12D2     		bcs	.L49
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 609              		.loc 1 4755 0
 610 003a 0D4B     		ldr	r3, .L55+12
 611 003c 1C60     		str	r4, [r3]
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 612              		.loc 1 4801 0
 613 003e 0FE0     		b	.L49
 614              	.LVL56:
 615              	.L53:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 97


 616              		.loc 1 4721 0 discriminator 1
 617 0040 002D     		cmp	r5, #0
 618 0042 E9D0     		beq	.L50
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 619              		.loc 1 4726 0
 620 0044 084B     		ldr	r3, .L55+4
 621 0046 1968     		ldr	r1, [r3]
 622 0048 0431     		adds	r1, r1, #4
 623 004a 0A48     		ldr	r0, .L55+16
 624 004c FFF7FEFF 		bl	vListInsertEnd
 625              	.LVL57:
 626 0050 06E0     		b	.L49
 627              	.LVL58:
 628              	.L54:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 629              		.loc 1 4742 0
 630 0052 094B     		ldr	r3, .L55+20
 631 0054 1868     		ldr	r0, [r3]
 632 0056 044B     		ldr	r3, .L55+4
 633 0058 1968     		ldr	r1, [r3]
 634 005a 0431     		adds	r1, r1, #4
 635 005c FFF7FEFF 		bl	vListInsert
 636              	.LVL59:
 637              	.L49:
 638              		.loc 1 4801 0
 639              		@ sp needed
 640              	.LVL60:
 641              	.LVL61:
 642 0060 70BD     		pop	{r4, r5, r6, pc}
 643              	.L56:
 644 0062 C046     		.align	2
 645              	.L55:
 646 0064 00000000 		.word	.LANCHOR14
 647 0068 00000000 		.word	.LANCHOR10
 648 006c 00000000 		.word	.LANCHOR2
 649 0070 00000000 		.word	.LANCHOR3
 650 0074 00000000 		.word	.LANCHOR0
 651 0078 00000000 		.word	.LANCHOR8
 652              		.cfi_endproc
 653              	.LFE46:
 655              		.section	.text.xTaskCreate,"ax",%progbits
 656              		.align	1
 657              		.global	xTaskCreate
 658              		.syntax unified
 659              		.code	16
 660              		.thumb_func
 661              		.fpu softvfp
 663              	xTaskCreate:
 664              	.LFB0:
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 665              		.loc 1 682 0
 666              		.cfi_startproc
 667              		@ args = 8, pretend = 0, frame = 8
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              	.LVL62:
 670 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 671              	.LCFI6:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 98


 672              		.cfi_def_cfa_offset 20
 673              		.cfi_offset 4, -20
 674              		.cfi_offset 5, -16
 675              		.cfi_offset 6, -12
 676              		.cfi_offset 7, -8
 677              		.cfi_offset 14, -4
 678 0002 87B0     		sub	sp, sp, #28
 679              	.LCFI7:
 680              		.cfi_def_cfa_offset 48
 681 0004 0490     		str	r0, [sp, #16]
 682 0006 0591     		str	r1, [sp, #20]
 683 0008 1400     		movs	r4, r2
 684 000a 1F00     		movs	r7, r3
 685              	.LBB2:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686              		.loc 1 716 0
 687 000c 9000     		lsls	r0, r2, #2
 688              	.LVL63:
 689 000e FFF7FEFF 		bl	pvPortMalloc
 690              	.LVL64:
 691 0012 061E     		subs	r6, r0, #0
 692              	.LVL65:
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693              		.loc 1 718 0
 694 0014 1ED0     		beq	.L61
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695              		.loc 1 721 0
 696 0016 5420     		movs	r0, #84
 697              	.LVL66:
 698 0018 FFF7FEFF 		bl	pvPortMalloc
 699              	.LVL67:
 700 001c 051E     		subs	r5, r0, #0
 701              	.LVL68:
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702              		.loc 1 723 0
 703 001e 15D0     		beq	.L59
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 704              		.loc 1 726 0
 705 0020 0663     		str	r6, [r0, #48]
 706              	.LVL69:
 707              	.L58:
 708              	.LBE2:
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 709              		.loc 1 742 0
 710 0022 002D     		cmp	r5, #0
 711 0024 18D0     		beq	.L62
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 712              		.loc 1 752 0
 713 0026 0023     		movs	r3, #0
 714 0028 0393     		str	r3, [sp, #12]
 715 002a 0295     		str	r5, [sp, #8]
 716 002c 0D9B     		ldr	r3, [sp, #52]
 717 002e 0193     		str	r3, [sp, #4]
 718 0030 0C9B     		ldr	r3, [sp, #48]
 719 0032 0093     		str	r3, [sp]
 720 0034 3B00     		movs	r3, r7
 721 0036 2200     		movs	r2, r4
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 99


 722 0038 0599     		ldr	r1, [sp, #20]
 723 003a 0498     		ldr	r0, [sp, #16]
 724 003c FFF7FEFF 		bl	prvInitialiseNewTask
 725              	.LVL70:
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 726              		.loc 1 753 0
 727 0040 2800     		movs	r0, r5
 728 0042 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 729              	.LVL71:
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 730              		.loc 1 754 0
 731 0046 0120     		movs	r0, #1
 732              	.LVL72:
 733              	.L57:
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 734              		.loc 1 762 0
 735 0048 07B0     		add	sp, sp, #28
 736              		@ sp needed
 737              	.LVL73:
 738              	.LVL74:
 739              	.LVL75:
 740 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 741              	.LVL76:
 742              	.L59:
 743              	.LBB3:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 744              		.loc 1 732 0
 745 004c 3000     		movs	r0, r6
 746              	.LVL77:
 747 004e FFF7FEFF 		bl	vPortFree
 748              	.LVL78:
 749 0052 E6E7     		b	.L58
 750              	.LVL79:
 751              	.L61:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 752              		.loc 1 737 0
 753 0054 0025     		movs	r5, #0
 754 0056 E4E7     		b	.L58
 755              	.LVL80:
 756              	.L62:
 757              	.LBE3:
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 758              		.loc 1 758 0
 759 0058 0120     		movs	r0, #1
 760 005a 4042     		rsbs	r0, r0, #0
 761              	.LVL81:
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 762              		.loc 1 761 0
 763 005c F4E7     		b	.L57
 764              		.cfi_endproc
 765              	.LFE0:
 767              		.section	.text.vTaskDelete,"ax",%progbits
 768              		.align	1
 769              		.global	vTaskDelete
 770              		.syntax unified
 771              		.code	16
 772              		.thumb_func
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 100


 773              		.fpu softvfp
 775              	vTaskDelete:
 776              	.LFB3:
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 777              		.loc 1 1049 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 0
 780              		@ frame_needed = 0, uses_anonymous_args = 0
 781              	.LVL82:
 782 0000 70B5     		push	{r4, r5, r6, lr}
 783              	.LCFI8:
 784              		.cfi_def_cfa_offset 16
 785              		.cfi_offset 4, -16
 786              		.cfi_offset 5, -12
 787              		.cfi_offset 6, -8
 788              		.cfi_offset 14, -4
 789 0002 0400     		movs	r4, r0
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 790              		.loc 1 1052 0
 791 0004 FFF7FEFF 		bl	vPortEnterCritical
 792              	.LVL83:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793              		.loc 1 1056 0
 794 0008 002C     		cmp	r4, #0
 795 000a 26D0     		beq	.L72
 796              	.LVL84:
 797              	.L64:
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 798              		.loc 1 1059 0 discriminator 4
 799 000c 251D     		adds	r5, r4, #4
 800 000e 2800     		movs	r0, r5
 801 0010 FFF7FEFF 		bl	uxListRemove
 802              	.LVL85:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803              		.loc 1 1069 0 discriminator 4
 804 0014 A36A     		ldr	r3, [r4, #40]
 805 0016 002B     		cmp	r3, #0
 806 0018 03D0     		beq	.L65
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807              		.loc 1 1071 0
 808 001a 2000     		movs	r0, r4
 809 001c 1830     		adds	r0, r0, #24
 810 001e FFF7FEFF 		bl	uxListRemove
 811              	.LVL86:
 812              	.L65:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 813              		.loc 1 1082 0
 814 0022 184A     		ldr	r2, .L75
 815 0024 1368     		ldr	r3, [r2]
 816 0026 0133     		adds	r3, r3, #1
 817 0028 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 818              		.loc 1 1084 0
 819 002a 174B     		ldr	r3, .L75+4
 820 002c 1B68     		ldr	r3, [r3]
 821 002e 9C42     		cmp	r4, r3
 822 0030 16D0     		beq	.L73
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 101


1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 823              		.loc 1 1107 0
 824 0032 164A     		ldr	r2, .L75+8
 825 0034 1368     		ldr	r3, [r2]
 826 0036 013B     		subs	r3, r3, #1
 827 0038 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 828              		.loc 1 1108 0
 829 003a 2000     		movs	r0, r4
 830 003c FFF7FEFF 		bl	prvDeleteTCB
 831              	.LVL87:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 832              		.loc 1 1112 0
 833 0040 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 834              	.LVL88:
 835              	.L67:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836              		.loc 1 1117 0
 837 0044 FFF7FEFF 		bl	vPortExitCritical
 838              	.LVL89:
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 839              		.loc 1 1121 0
 840 0048 114B     		ldr	r3, .L75+12
 841 004a 1B68     		ldr	r3, [r3]
 842 004c 002B     		cmp	r3, #0
 843 004e 03D0     		beq	.L63
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 844              		.loc 1 1123 0
 845 0050 0D4B     		ldr	r3, .L75+4
 846 0052 1B68     		ldr	r3, [r3]
 847 0054 9C42     		cmp	r4, r3
 848 0056 0CD0     		beq	.L74
 849              	.L63:
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850              		.loc 1 1133 0
 851              		@ sp needed
 852              	.LVL90:
 853              	.LVL91:
 854 0058 70BD     		pop	{r4, r5, r6, pc}
 855              	.LVL92:
 856              	.L72:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 857              		.loc 1 1056 0 discriminator 1
 858 005a 0B4B     		ldr	r3, .L75+4
 859 005c 1C68     		ldr	r4, [r3]
 860              	.LVL93:
 861 005e D5E7     		b	.L64
 862              	.LVL94:
 863              	.L73:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864              		.loc 1 1091 0
 865 0060 2900     		movs	r1, r5
 866 0062 0C48     		ldr	r0, .L75+16
 867 0064 FFF7FEFF 		bl	vListInsertEnd
 868              	.LVL95:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 869              		.loc 1 1096 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 102


 870 0068 0B4A     		ldr	r2, .L75+20
 871 006a 1368     		ldr	r3, [r2]
 872 006c 0133     		adds	r3, r3, #1
 873 006e 1360     		str	r3, [r2]
 874 0070 E8E7     		b	.L67
 875              	.L74:
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 876              		.loc 1 1125 0
 877 0072 0A4B     		ldr	r3, .L75+24
 878 0074 1B68     		ldr	r3, [r3]
 879 0076 002B     		cmp	r3, #0
 880 0078 01D0     		beq	.L69
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 881              		.loc 1 1125 0 is_stmt 0 discriminator 1
 882              		.syntax divided
 883              	@ 1125 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 884 007a 72B6     		 cpsid i 
 885              	@ 0 "" 2
 886              		.thumb
 887              		.syntax unified
 888              	.L70:
 889 007c FEE7     		b	.L70
 890              	.L69:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 891              		.loc 1 1126 0 is_stmt 1
 892 007e FFF7FEFF 		bl	vPortYield
 893              	.LVL96:
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 894              		.loc 1 1133 0
 895 0082 E9E7     		b	.L63
 896              	.L76:
 897              		.align	2
 898              	.L75:
 899 0084 00000000 		.word	.LANCHOR12
 900 0088 00000000 		.word	.LANCHOR10
 901 008c 00000000 		.word	.LANCHOR9
 902 0090 00000000 		.word	.LANCHOR11
 903 0094 00000000 		.word	.LANCHOR7
 904 0098 00000000 		.word	.LANCHOR15
 905 009c 00000000 		.word	.LANCHOR16
 906              		.cfi_endproc
 907              	.LFE3:
 909              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 910              		.align	1
 911              		.global	uxTaskPriorityGet
 912              		.syntax unified
 913              		.code	16
 914              		.thumb_func
 915              		.fpu softvfp
 917              	uxTaskPriorityGet:
 918              	.LFB5:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 919              		.loc 1 1341 0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 0
 922              		@ frame_needed = 0, uses_anonymous_args = 0
 923              	.LVL97:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 103


 924 0000 10B5     		push	{r4, lr}
 925              	.LCFI9:
 926              		.cfi_def_cfa_offset 8
 927              		.cfi_offset 4, -8
 928              		.cfi_offset 14, -4
 929 0002 0400     		movs	r4, r0
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 930              		.loc 1 1345 0
 931 0004 FFF7FEFF 		bl	vPortEnterCritical
 932              	.LVL98:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 933              		.loc 1 1349 0
 934 0008 002C     		cmp	r4, #0
 935 000a 04D0     		beq	.L80
 936              	.LVL99:
 937              	.L78:
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 938              		.loc 1 1350 0 discriminator 4
 939 000c E46A     		ldr	r4, [r4, #44]
 940              	.LVL100:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941              		.loc 1 1352 0 discriminator 4
 942 000e FFF7FEFF 		bl	vPortExitCritical
 943              	.LVL101:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944              		.loc 1 1355 0 discriminator 4
 945 0012 2000     		movs	r0, r4
 946              		@ sp needed
 947              	.LVL102:
 948 0014 10BD     		pop	{r4, pc}
 949              	.LVL103:
 950              	.L80:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 951              		.loc 1 1349 0 discriminator 1
 952 0016 014B     		ldr	r3, .L81
 953 0018 1C68     		ldr	r4, [r3]
 954              	.LVL104:
 955 001a F7E7     		b	.L78
 956              	.L82:
 957              		.align	2
 958              	.L81:
 959 001c 00000000 		.word	.LANCHOR10
 960              		.cfi_endproc
 961              	.LFE5:
 963              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 964              		.align	1
 965              		.global	uxTaskPriorityGetFromISR
 966              		.syntax unified
 967              		.code	16
 968              		.thumb_func
 969              		.fpu softvfp
 971              	uxTaskPriorityGetFromISR:
 972              	.LFB6:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 973              		.loc 1 1363 0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 104


 976              		@ frame_needed = 0, uses_anonymous_args = 0
 977              	.LVL105:
 978 0000 10B5     		push	{r4, lr}
 979              	.LCFI10:
 980              		.cfi_def_cfa_offset 8
 981              		.cfi_offset 4, -8
 982              		.cfi_offset 14, -4
 983 0002 0400     		movs	r4, r0
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 984              		.loc 1 1385 0
 985 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 986              	.LVL106:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 987              		.loc 1 1389 0
 988 0008 002C     		cmp	r4, #0
 989 000a 04D0     		beq	.L86
 990              	.LVL107:
 991              	.L84:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 992              		.loc 1 1390 0 discriminator 4
 993 000c E46A     		ldr	r4, [r4, #44]
 994              	.LVL108:
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 995              		.loc 1 1392 0 discriminator 4
 996 000e FFF7FEFF 		bl	vClearInterruptMaskFromISR
 997              	.LVL109:
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 998              		.loc 1 1395 0 discriminator 4
 999 0012 2000     		movs	r0, r4
 1000              		@ sp needed
 1001              	.LVL110:
 1002 0014 10BD     		pop	{r4, pc}
 1003              	.LVL111:
 1004              	.L86:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1005              		.loc 1 1389 0 discriminator 1
 1006 0016 014B     		ldr	r3, .L87
 1007 0018 1C68     		ldr	r4, [r3]
 1008              	.LVL112:
 1009 001a F7E7     		b	.L84
 1010              	.L88:
 1011              		.align	2
 1012              	.L87:
 1013 001c 00000000 		.word	.LANCHOR10
 1014              		.cfi_endproc
 1015              	.LFE6:
 1017              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1018              		.align	1
 1019              		.global	vTaskPrioritySet
 1020              		.syntax unified
 1021              		.code	16
 1022              		.thumb_func
 1023              		.fpu softvfp
 1025              	vTaskPrioritySet:
 1026              	.LFB7:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1027              		.loc 1 1403 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 105


 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 0
 1030              		@ frame_needed = 0, uses_anonymous_args = 0
 1031              	.LVL113:
 1032 0000 70B5     		push	{r4, r5, r6, lr}
 1033              	.LCFI11:
 1034              		.cfi_def_cfa_offset 16
 1035              		.cfi_offset 4, -16
 1036              		.cfi_offset 5, -12
 1037              		.cfi_offset 6, -8
 1038              		.cfi_offset 14, -4
 1039 0002 0400     		movs	r4, r0
 1040 0004 0D00     		movs	r5, r1
 1041              	.LVL114:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1042              		.loc 1 1408 0
 1043 0006 0629     		cmp	r1, #6
 1044 0008 01D9     		bls	.L90
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1045              		.loc 1 1408 0 is_stmt 0 discriminator 1
 1046              		.syntax divided
 1047              	@ 1408 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1048 000a 72B6     		 cpsid i 
 1049              	@ 0 "" 2
 1050              		.thumb
 1051              		.syntax unified
 1052              	.L91:
 1053 000c FEE7     		b	.L91
 1054              	.L90:
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1055              		.loc 1 1420 0 is_stmt 1
 1056 000e FFF7FEFF 		bl	vPortEnterCritical
 1057              	.LVL115:
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1058              		.loc 1 1424 0
 1059 0012 002C     		cmp	r4, #0
 1060 0014 01D1     		bne	.L92
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1061              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1062 0016 274B     		ldr	r3, .L106
 1063 0018 1C68     		ldr	r4, [r3]
 1064              	.LVL116:
 1065              	.L92:
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1066              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1067 001a 636C     		ldr	r3, [r4, #68]
 1068              	.LVL117:
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1069              		.loc 1 1438 0 discriminator 4
 1070 001c 9D42     		cmp	r5, r3
 1071 001e 37D0     		beq	.L93
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1072              		.loc 1 1442 0
 1073 0020 39D9     		bls	.L94
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1074              		.loc 1 1444 0
 1075 0022 244A     		ldr	r2, .L106
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 106


 1076 0024 1268     		ldr	r2, [r2]
 1077 0026 9442     		cmp	r4, r2
 1078 0028 3BD0     		beq	.L102
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1079              		.loc 1 1449 0
 1080 002a 224A     		ldr	r2, .L106
 1081 002c 1268     		ldr	r2, [r2]
 1082 002e D26A     		ldr	r2, [r2, #44]
 1083 0030 9542     		cmp	r5, r2
 1084 0032 38D2     		bcs	.L103
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1085              		.loc 1 1406 0
 1086 0034 0026     		movs	r6, #0
 1087              	.L95:
 1088              	.LVL118:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1089              		.loc 1 1482 0
 1090 0036 E26A     		ldr	r2, [r4, #44]
 1091              	.LVL119:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1092              		.loc 1 1488 0
 1093 0038 9342     		cmp	r3, r2
 1094 003a 00D1     		bne	.L96
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1095              		.loc 1 1490 0
 1096 003c E562     		str	r5, [r4, #44]
 1097              	.L96:
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1098              		.loc 1 1498 0
 1099 003e 6564     		str	r5, [r4, #68]
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1100              		.loc 1 1508 0
 1101 0040 A369     		ldr	r3, [r4, #24]
 1102              	.LVL120:
 1103 0042 002B     		cmp	r3, #0
 1104 0044 02DB     		blt	.L97
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1105              		.loc 1 1510 0
 1106 0046 0723     		movs	r3, #7
 1107 0048 5D1B     		subs	r5, r3, r5
 1108              	.LVL121:
 1109 004a A561     		str	r5, [r4, #24]
 1110              	.L97:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1111              		.loc 1 1521 0
 1112 004c 9300     		lsls	r3, r2, #2
 1113 004e 9B18     		adds	r3, r3, r2
 1114 0050 9A00     		lsls	r2, r3, #2
 1115              	.LVL122:
 1116 0052 194B     		ldr	r3, .L106+4
 1117 0054 9B18     		adds	r3, r3, r2
 1118 0056 6269     		ldr	r2, [r4, #20]
 1119 0058 9A42     		cmp	r2, r3
 1120 005a 28D1     		bne	.L105
 1121 005c 0123     		movs	r3, #1
 1122              	.L98:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 107


 1123              		.loc 1 1521 0 is_stmt 0 discriminator 4
 1124 005e 002B     		cmp	r3, #0
 1125 0060 12D0     		beq	.L99
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1126              		.loc 1 1526 0 is_stmt 1
 1127 0062 251D     		adds	r5, r4, #4
 1128 0064 2800     		movs	r0, r5
 1129 0066 FFF7FEFF 		bl	uxListRemove
 1130              	.LVL123:
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1131              		.loc 1 1537 0
 1132 006a E26A     		ldr	r2, [r4, #44]
 1133 006c 134B     		ldr	r3, .L106+8
 1134 006e 1B68     		ldr	r3, [r3]
 1135 0070 9A42     		cmp	r2, r3
 1136 0072 01D9     		bls	.L100
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1137              		.loc 1 1537 0 is_stmt 0 discriminator 1
 1138 0074 114B     		ldr	r3, .L106+8
 1139 0076 1A60     		str	r2, [r3]
 1140              	.L100:
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1141              		.loc 1 1537 0 discriminator 3
 1142 0078 9300     		lsls	r3, r2, #2
 1143 007a 9B18     		adds	r3, r3, r2
 1144 007c 9A00     		lsls	r2, r3, #2
 1145 007e 0E48     		ldr	r0, .L106+4
 1146 0080 8018     		adds	r0, r0, r2
 1147 0082 2900     		movs	r1, r5
 1148 0084 FFF7FEFF 		bl	vListInsertEnd
 1149              	.LVL124:
 1150              	.L99:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1151              		.loc 1 1544 0 is_stmt 1
 1152 0088 002E     		cmp	r6, #0
 1153 008a 01D0     		beq	.L93
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1154              		.loc 1 1546 0
 1155 008c FFF7FEFF 		bl	vPortYield
 1156              	.LVL125:
 1157              	.L93:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1158              		.loc 1 1558 0
 1159 0090 FFF7FEFF 		bl	vPortExitCritical
 1160              	.LVL126:
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1161              		.loc 1 1559 0
 1162              		@ sp needed
 1163              	.LVL127:
 1164 0094 70BD     		pop	{r4, r5, r6, pc}
 1165              	.LVL128:
 1166              	.L94:
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1167              		.loc 1 1465 0
 1168 0096 074A     		ldr	r2, .L106
 1169 0098 1268     		ldr	r2, [r2]
 1170 009a 9442     		cmp	r4, r2
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 108


 1171 009c 05D0     		beq	.L104
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1172              		.loc 1 1406 0
 1173 009e 0026     		movs	r6, #0
 1174 00a0 C9E7     		b	.L95
 1175              	.L102:
 1176 00a2 0026     		movs	r6, #0
 1177 00a4 C7E7     		b	.L95
 1178              	.L103:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1179              		.loc 1 1451 0
 1180 00a6 0126     		movs	r6, #1
 1181 00a8 C5E7     		b	.L95
 1182              	.L104:
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1183              		.loc 1 1470 0
 1184 00aa 0126     		movs	r6, #1
 1185 00ac C3E7     		b	.L95
 1186              	.LVL129:
 1187              	.L105:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1188              		.loc 1 1521 0
 1189 00ae 0023     		movs	r3, #0
 1190 00b0 D5E7     		b	.L98
 1191              	.L107:
 1192 00b2 C046     		.align	2
 1193              	.L106:
 1194 00b4 00000000 		.word	.LANCHOR10
 1195 00b8 00000000 		.word	.LANCHOR4
 1196 00bc 00000000 		.word	.LANCHOR13
 1197              		.cfi_endproc
 1198              	.LFE7:
 1200              		.section	.text.vTaskResume,"ax",%progbits
 1201              		.align	1
 1202              		.global	vTaskResume
 1203              		.syntax unified
 1204              		.code	16
 1205              		.thumb_func
 1206              		.fpu softvfp
 1208              	vTaskResume:
 1209              	.LFB10:
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1210              		.loc 1 1703 0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 0
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214              	.LVL130:
 1215 0000 70B5     		push	{r4, r5, r6, lr}
 1216              	.LCFI12:
 1217              		.cfi_def_cfa_offset 16
 1218              		.cfi_offset 4, -16
 1219              		.cfi_offset 5, -12
 1220              		.cfi_offset 6, -8
 1221              		.cfi_offset 14, -4
 1222 0002 041E     		subs	r4, r0, #0
 1223              	.LVL131:
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 109


 1224              		.loc 1 1707 0
 1225 0004 0DD0     		beq	.L114
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1226              		.loc 1 1711 0 discriminator 1
 1227 0006 164B     		ldr	r3, .L116
 1228 0008 1B68     		ldr	r3, [r3]
 1229 000a 9842     		cmp	r0, r3
 1230 000c 08D0     		beq	.L108
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1231              		.loc 1 1713 0
 1232 000e FFF7FEFF 		bl	vPortEnterCritical
 1233              	.LVL132:
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1234              		.loc 1 1715 0
 1235 0012 2000     		movs	r0, r4
 1236 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1237              	.LVL133:
 1238 0018 0028     		cmp	r0, #0
 1239 001a 04D1     		bne	.L115
 1240              	.L112:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1241              		.loc 1 1742 0
 1242 001c FFF7FEFF 		bl	vPortExitCritical
 1243              	.LVL134:
 1244              	.L108:
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1245              		.loc 1 1748 0
 1246              		@ sp needed
 1247              	.LVL135:
 1248 0020 70BD     		pop	{r4, r5, r6, pc}
 1249              	.LVL136:
 1250              	.L114:
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1251              		.loc 1 1707 0 discriminator 1
 1252              		.syntax divided
 1253              	@ 1707 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1254 0022 72B6     		 cpsid i 
 1255              	@ 0 "" 2
 1256              		.thumb
 1257              		.syntax unified
 1258              	.L110:
 1259 0024 FEE7     		b	.L110
 1260              	.LVL137:
 1261              	.L115:
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1262              		.loc 1 1721 0
 1263 0026 251D     		adds	r5, r4, #4
 1264 0028 2800     		movs	r0, r5
 1265 002a FFF7FEFF 		bl	uxListRemove
 1266              	.LVL138:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1267              		.loc 1 1722 0
 1268 002e E26A     		ldr	r2, [r4, #44]
 1269 0030 0C4B     		ldr	r3, .L116+4
 1270 0032 1B68     		ldr	r3, [r3]
 1271 0034 9A42     		cmp	r2, r3
 1272 0036 01D9     		bls	.L113
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 110


1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1273              		.loc 1 1722 0 is_stmt 0 discriminator 1
 1274 0038 0A4B     		ldr	r3, .L116+4
 1275 003a 1A60     		str	r2, [r3]
 1276              	.L113:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1277              		.loc 1 1722 0 discriminator 3
 1278 003c 9300     		lsls	r3, r2, #2
 1279 003e 9B18     		adds	r3, r3, r2
 1280 0040 9A00     		lsls	r2, r3, #2
 1281 0042 0948     		ldr	r0, .L116+8
 1282 0044 8018     		adds	r0, r0, r2
 1283 0046 2900     		movs	r1, r5
 1284 0048 FFF7FEFF 		bl	vListInsertEnd
 1285              	.LVL139:
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1286              		.loc 1 1725 0 is_stmt 1 discriminator 3
 1287 004c E26A     		ldr	r2, [r4, #44]
 1288 004e 044B     		ldr	r3, .L116
 1289 0050 1B68     		ldr	r3, [r3]
 1290 0052 DB6A     		ldr	r3, [r3, #44]
 1291 0054 9A42     		cmp	r2, r3
 1292 0056 E1D3     		bcc	.L112
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1293              		.loc 1 1730 0
 1294 0058 FFF7FEFF 		bl	vPortYield
 1295              	.LVL140:
 1296 005c DEE7     		b	.L112
 1297              	.L117:
 1298 005e C046     		.align	2
 1299              	.L116:
 1300 0060 00000000 		.word	.LANCHOR10
 1301 0064 00000000 		.word	.LANCHOR13
 1302 0068 00000000 		.word	.LANCHOR4
 1303              		.cfi_endproc
 1304              	.LFE10:
 1306              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1307              		.align	1
 1308              		.global	xTaskResumeFromISR
 1309              		.syntax unified
 1310              		.code	16
 1311              		.thumb_func
 1312              		.fpu softvfp
 1314              	xTaskResumeFromISR:
 1315              	.LFB11:
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1316              		.loc 1 1757 0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 0
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 1320              	.LVL141:
 1321 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1322              	.LCFI13:
 1323              		.cfi_def_cfa_offset 24
 1324              		.cfi_offset 3, -24
 1325              		.cfi_offset 4, -20
 1326              		.cfi_offset 5, -16
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 111


 1327              		.cfi_offset 6, -12
 1328              		.cfi_offset 7, -8
 1329              		.cfi_offset 14, -4
 1330 0002 041E     		subs	r4, r0, #0
 1331              	.LVL142:
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1332              		.loc 1 1762 0
 1333 0004 2AD0     		beq	.L127
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1334              		.loc 1 1782 0
 1335 0006 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1336              	.LVL143:
 1337 000a 0600     		movs	r6, r0
 1338              	.LVL144:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1339              		.loc 1 1784 0
 1340 000c 2000     		movs	r0, r4
 1341              	.LVL145:
 1342 000e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1343              	.LVL146:
 1344 0012 0028     		cmp	r0, #0
 1345 0014 2DD0     		beq	.L125
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1346              		.loc 1 1789 0
 1347 0016 184B     		ldr	r3, .L128
 1348 0018 1B68     		ldr	r3, [r3]
 1349 001a 002B     		cmp	r3, #0
 1350 001c 22D1     		bne	.L122
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1351              		.loc 1 1793 0
 1352 001e 174B     		ldr	r3, .L128+4
 1353 0020 1B68     		ldr	r3, [r3]
 1354 0022 DB6A     		ldr	r3, [r3, #44]
 1355 0024 E26A     		ldr	r2, [r4, #44]
 1356 0026 9A42     		cmp	r2, r3
 1357 0028 1AD2     		bcs	.L126
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1358              		.loc 1 1758 0
 1359 002a 0025     		movs	r5, #0
 1360              	.L123:
 1361              	.LVL147:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1362              		.loc 1 1802 0
 1363 002c 271D     		adds	r7, r4, #4
 1364 002e 3800     		movs	r0, r7
 1365 0030 FFF7FEFF 		bl	uxListRemove
 1366              	.LVL148:
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1367              		.loc 1 1803 0
 1368 0034 E26A     		ldr	r2, [r4, #44]
 1369 0036 124B     		ldr	r3, .L128+8
 1370 0038 1B68     		ldr	r3, [r3]
 1371 003a 9A42     		cmp	r2, r3
 1372 003c 01D9     		bls	.L124
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1373              		.loc 1 1803 0 is_stmt 0 discriminator 1
 1374 003e 104B     		ldr	r3, .L128+8
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 112


 1375 0040 1A60     		str	r2, [r3]
 1376              	.L124:
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1377              		.loc 1 1803 0 discriminator 3
 1378 0042 9300     		lsls	r3, r2, #2
 1379 0044 9B18     		adds	r3, r3, r2
 1380 0046 9A00     		lsls	r2, r3, #2
 1381 0048 0E48     		ldr	r0, .L128+12
 1382 004a 8018     		adds	r0, r0, r2
 1383 004c 3900     		movs	r1, r7
 1384 004e FFF7FEFF 		bl	vListInsertEnd
 1385              	.LVL149:
 1386              	.L121:
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1387              		.loc 1 1818 0 is_stmt 1
 1388 0052 3000     		movs	r0, r6
 1389 0054 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1390              	.LVL150:
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1391              		.loc 1 1821 0
 1392 0058 2800     		movs	r0, r5
 1393              		@ sp needed
 1394              	.LVL151:
 1395              	.LVL152:
 1396              	.LVL153:
 1397 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1398              	.LVL154:
 1399              	.L127:
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1400              		.loc 1 1762 0 discriminator 1
 1401              		.syntax divided
 1402              	@ 1762 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1403 005c 72B6     		 cpsid i 
 1404              	@ 0 "" 2
 1405              		.thumb
 1406              		.syntax unified
 1407              	.L120:
 1408 005e FEE7     		b	.L120
 1409              	.LVL155:
 1410              	.L126:
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1411              		.loc 1 1795 0
 1412 0060 0125     		movs	r5, #1
 1413 0062 E3E7     		b	.L123
 1414              	.L122:
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1415              		.loc 1 1810 0
 1416 0064 2100     		movs	r1, r4
 1417 0066 1831     		adds	r1, r1, #24
 1418 0068 0748     		ldr	r0, .L128+16
 1419 006a FFF7FEFF 		bl	vListInsertEnd
 1420              	.LVL156:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1421              		.loc 1 1758 0
 1422 006e 0025     		movs	r5, #0
 1423 0070 EFE7     		b	.L121
 1424              	.L125:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 113


 1425 0072 0025     		movs	r5, #0
 1426 0074 EDE7     		b	.L121
 1427              	.L129:
 1428 0076 C046     		.align	2
 1429              	.L128:
 1430 0078 00000000 		.word	.LANCHOR16
 1431 007c 00000000 		.word	.LANCHOR10
 1432 0080 00000000 		.word	.LANCHOR13
 1433 0084 00000000 		.word	.LANCHOR4
 1434 0088 00000000 		.word	.LANCHOR1
 1435              		.cfi_endproc
 1436              	.LFE11:
 1438              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1439              		.align	1
 1440              		.global	vTaskStartScheduler
 1441              		.syntax unified
 1442              		.code	16
 1443              		.thumb_func
 1444              		.fpu softvfp
 1446              	vTaskStartScheduler:
 1447              	.LFB12:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1448              		.loc 1 1827 0
 1449              		.cfi_startproc
 1450              		@ args = 0, pretend = 0, frame = 0
 1451              		@ frame_needed = 0, uses_anonymous_args = 0
 1452 0000 00B5     		push	{lr}
 1453              	.LCFI14:
 1454              		.cfi_def_cfa_offset 4
 1455              		.cfi_offset 14, -4
 1456 0002 83B0     		sub	sp, sp, #12
 1457              	.LCFI15:
 1458              		.cfi_def_cfa_offset 16
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1459              		.loc 1 1860 0
 1460 0004 0F4B     		ldr	r3, .L136
 1461 0006 0193     		str	r3, [sp, #4]
 1462 0008 0023     		movs	r3, #0
 1463 000a 0093     		str	r3, [sp]
 1464 000c 8022     		movs	r2, #128
 1465 000e 0E49     		ldr	r1, .L136+4
 1466 0010 0E48     		ldr	r0, .L136+8
 1467 0012 FFF7FEFF 		bl	xTaskCreate
 1468              	.LVL157:
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1469              		.loc 1 1881 0
 1470 0016 0128     		cmp	r0, #1
 1471 0018 03D0     		beq	.L134
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1472              		.loc 1 1924 0
 1473 001a 431C     		adds	r3, r0, #1
 1474 001c 0FD0     		beq	.L135
 1475              	.LVL158:
 1476              	.L130:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1477              		.loc 1 1930 0
 1478 001e 03B0     		add	sp, sp, #12
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 114


 1479              		@ sp needed
 1480 0020 00BD     		pop	{pc}
 1481              	.LVL159:
 1482              	.L134:
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1483              		.loc 1 1888 0
 1484              		.syntax divided
 1485              	@ 1888 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1486 0022 72B6     		 cpsid i 
 1487              	@ 0 "" 2
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1488              		.loc 1 1898 0
 1489              		.thumb
 1490              		.syntax unified
 1491 0024 0122     		movs	r2, #1
 1492 0026 5242     		rsbs	r2, r2, #0
 1493 0028 094B     		ldr	r3, .L136+12
 1494 002a 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1495              		.loc 1 1899 0
 1496 002c 0232     		adds	r2, r2, #2
 1497 002e 094B     		ldr	r3, .L136+16
 1498 0030 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1499              		.loc 1 1900 0
 1500 0032 0022     		movs	r2, #0
 1501 0034 084B     		ldr	r3, .L136+20
 1502 0036 1A60     		str	r2, [r3]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1503              		.loc 1 1909 0
 1504 0038 FFF7FEFF 		bl	xPortStartScheduler
 1505              	.LVL160:
 1506 003c EFE7     		b	.L130
 1507              	.LVL161:
 1508              	.L135:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1509              		.loc 1 1924 0 discriminator 1
 1510              		.syntax divided
 1511              	@ 1924 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1512 003e 72B6     		 cpsid i 
 1513              	@ 0 "" 2
 1514              		.thumb
 1515              		.syntax unified
 1516              	.L133:
 1517 0040 FEE7     		b	.L133
 1518              	.L137:
 1519 0042 C046     		.align	2
 1520              	.L136:
 1521 0044 00000000 		.word	.LANCHOR17
 1522 0048 00000000 		.word	.LC44
 1523 004c 00000000 		.word	prvIdleTask
 1524 0050 00000000 		.word	.LANCHOR3
 1525 0054 00000000 		.word	.LANCHOR11
 1526 0058 00000000 		.word	.LANCHOR14
 1527              		.cfi_endproc
 1528              	.LFE12:
 1530              		.section	.text.vTaskEndScheduler,"ax",%progbits
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 115


 1531              		.align	1
 1532              		.global	vTaskEndScheduler
 1533              		.syntax unified
 1534              		.code	16
 1535              		.thumb_func
 1536              		.fpu softvfp
 1538              	vTaskEndScheduler:
 1539              	.LFB13:
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1540              		.loc 1 1934 0
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 0
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 1544 0000 10B5     		push	{r4, lr}
 1545              	.LCFI16:
 1546              		.cfi_def_cfa_offset 8
 1547              		.cfi_offset 4, -8
 1548              		.cfi_offset 14, -4
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1549              		.loc 1 1938 0
 1550              		.syntax divided
 1551              	@ 1938 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1552 0002 72B6     		 cpsid i 
 1553              	@ 0 "" 2
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1554              		.loc 1 1939 0
 1555              		.thumb
 1556              		.syntax unified
 1557 0004 0022     		movs	r2, #0
 1558 0006 024B     		ldr	r3, .L139
 1559 0008 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1560              		.loc 1 1940 0
 1561 000a FFF7FEFF 		bl	vPortEndScheduler
 1562              	.LVL162:
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1563              		.loc 1 1941 0
 1564              		@ sp needed
 1565 000e 10BD     		pop	{r4, pc}
 1566              	.L140:
 1567              		.align	2
 1568              	.L139:
 1569 0010 00000000 		.word	.LANCHOR11
 1570              		.cfi_endproc
 1571              	.LFE13:
 1573              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1574              		.align	1
 1575              		.global	vTaskSuspendAll
 1576              		.syntax unified
 1577              		.code	16
 1578              		.thumb_func
 1579              		.fpu softvfp
 1581              	vTaskSuspendAll:
 1582              	.LFB14:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1583              		.loc 1 1945 0
 1584              		.cfi_startproc
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 116


 1585              		@ args = 0, pretend = 0, frame = 0
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              		@ link register save eliminated.
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1588              		.loc 1 1950 0
 1589 0000 024A     		ldr	r2, .L142
 1590 0002 1368     		ldr	r3, [r2]
 1591 0004 0133     		adds	r3, r3, #1
 1592 0006 1360     		str	r3, [r2]
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1593              		.loc 1 1951 0
 1594              		@ sp needed
 1595 0008 7047     		bx	lr
 1596              	.L143:
 1597 000a C046     		.align	2
 1598              	.L142:
 1599 000c 00000000 		.word	.LANCHOR16
 1600              		.cfi_endproc
 1601              	.LFE14:
 1603              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1604              		.align	1
 1605              		.global	xTaskGetTickCount
 1606              		.syntax unified
 1607              		.code	16
 1608              		.thumb_func
 1609              		.fpu softvfp
 1611              	xTaskGetTickCount:
 1612              	.LFB16:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1613              		.loc 1 2128 0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 0
 1616              		@ frame_needed = 0, uses_anonymous_args = 0
 1617              		@ link register save eliminated.
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1618              		.loc 1 2134 0
 1619 0000 014B     		ldr	r3, .L145
 1620 0002 1868     		ldr	r0, [r3]
 1621              	.LVL163:
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1622              		.loc 1 2139 0
 1623              		@ sp needed
 1624 0004 7047     		bx	lr
 1625              	.L146:
 1626 0006 C046     		.align	2
 1627              	.L145:
 1628 0008 00000000 		.word	.LANCHOR14
 1629              		.cfi_endproc
 1630              	.LFE16:
 1632              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1633              		.align	1
 1634              		.global	xTaskGetTickCountFromISR
 1635              		.syntax unified
 1636              		.code	16
 1637              		.thumb_func
 1638              		.fpu softvfp
 1640              	xTaskGetTickCountFromISR:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 117


 1641              	.LFB17:
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1642              		.loc 1 2143 0
 1643              		.cfi_startproc
 1644              		@ args = 0, pretend = 0, frame = 0
 1645              		@ frame_needed = 0, uses_anonymous_args = 0
 1646              		@ link register save eliminated.
 1647              	.LVL164:
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1648              		.loc 1 2165 0
 1649 0000 014B     		ldr	r3, .L148
 1650 0002 1868     		ldr	r0, [r3]
 1651              	.LVL165:
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1652              		.loc 1 2170 0
 1653              		@ sp needed
 1654 0004 7047     		bx	lr
 1655              	.L149:
 1656 0006 C046     		.align	2
 1657              	.L148:
 1658 0008 00000000 		.word	.LANCHOR14
 1659              		.cfi_endproc
 1660              	.LFE17:
 1662              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1663              		.align	1
 1664              		.global	uxTaskGetNumberOfTasks
 1665              		.syntax unified
 1666              		.code	16
 1667              		.thumb_func
 1668              		.fpu softvfp
 1670              	uxTaskGetNumberOfTasks:
 1671              	.LFB18:
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1672              		.loc 1 2174 0
 1673              		.cfi_startproc
 1674              		@ args = 0, pretend = 0, frame = 0
 1675              		@ frame_needed = 0, uses_anonymous_args = 0
 1676              		@ link register save eliminated.
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1677              		.loc 1 2177 0
 1678 0000 014B     		ldr	r3, .L151
 1679 0002 1868     		ldr	r0, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1680              		.loc 1 2178 0
 1681              		@ sp needed
 1682 0004 7047     		bx	lr
 1683              	.L152:
 1684 0006 C046     		.align	2
 1685              	.L151:
 1686 0008 00000000 		.word	.LANCHOR9
 1687              		.cfi_endproc
 1688              	.LFE18:
 1690              		.section	.text.pcTaskGetName,"ax",%progbits
 1691              		.align	1
 1692              		.global	pcTaskGetName
 1693              		.syntax unified
 1694              		.code	16
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 118


 1695              		.thumb_func
 1696              		.fpu softvfp
 1698              	pcTaskGetName:
 1699              	.LFB19:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1700              		.loc 1 2182 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
 1705              	.LVL166:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1706              		.loc 1 2187 0
 1707 0000 0028     		cmp	r0, #0
 1708 0002 03D0     		beq	.L158
 1709              	.LVL167:
 1710              	.L154:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1711              		.loc 1 2188 0 discriminator 4
 1712 0004 0028     		cmp	r0, #0
 1713 0006 04D0     		beq	.L159
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1714              		.loc 1 2189 0
 1715 0008 3430     		adds	r0, r0, #52
 1716              	.LVL168:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1717              		.loc 1 2190 0
 1718              		@ sp needed
 1719 000a 7047     		bx	lr
 1720              	.LVL169:
 1721              	.L158:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1722              		.loc 1 2187 0 discriminator 1
 1723 000c 024B     		ldr	r3, .L160
 1724 000e 1868     		ldr	r0, [r3]
 1725              	.LVL170:
 1726 0010 F8E7     		b	.L154
 1727              	.LVL171:
 1728              	.L159:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1729              		.loc 1 2188 0 discriminator 1
 1730              		.syntax divided
 1731              	@ 2188 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1732 0012 72B6     		 cpsid i 
 1733              	@ 0 "" 2
 1734              		.thumb
 1735              		.syntax unified
 1736              	.L156:
 1737 0014 FEE7     		b	.L156
 1738              	.L161:
 1739 0016 C046     		.align	2
 1740              	.L160:
 1741 0018 00000000 		.word	.LANCHOR10
 1742              		.cfi_endproc
 1743              	.LFE19:
 1745              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1746              		.align	1
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 119


 1747              		.global	xTaskIncrementTick
 1748              		.syntax unified
 1749              		.code	16
 1750              		.thumb_func
 1751              		.fpu softvfp
 1753              	xTaskIncrementTick:
 1754              	.LFB20:
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1755              		.loc 1 2500 0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1760              	.LCFI17:
 1761              		.cfi_def_cfa_offset 24
 1762              		.cfi_offset 3, -24
 1763              		.cfi_offset 4, -20
 1764              		.cfi_offset 5, -16
 1765              		.cfi_offset 6, -12
 1766              		.cfi_offset 7, -8
 1767              		.cfi_offset 14, -4
 1768              	.LVL172:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1769              		.loc 1 2509 0
 1770 0002 3B4B     		ldr	r3, .L186
 1771 0004 1B68     		ldr	r3, [r3]
 1772 0006 002B     		cmp	r3, #0
 1773 0008 66D1     		bne	.L163
 1774              	.LBB4:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1775              		.loc 1 2513 0
 1776 000a 3A4B     		ldr	r3, .L186+4
 1777 000c 1D68     		ldr	r5, [r3]
 1778 000e 0135     		adds	r5, r5, #1
 1779              	.LVL173:
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1780              		.loc 1 2517 0
 1781 0010 1D60     		str	r5, [r3]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1782              		.loc 1 2519 0
 1783 0012 002D     		cmp	r5, #0
 1784 0014 12D1     		bne	.L164
 1785              	.LBB5:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1786              		.loc 1 2521 0
 1787 0016 384B     		ldr	r3, .L186+8
 1788 0018 1B68     		ldr	r3, [r3]
 1789 001a 1B68     		ldr	r3, [r3]
 1790 001c 002B     		cmp	r3, #0
 1791 001e 01D0     		beq	.L165
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1792              		.loc 1 2521 0 is_stmt 0 discriminator 1
 1793              		.syntax divided
 1794              	@ 2521 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1795 0020 72B6     		 cpsid i 
 1796              	@ 0 "" 2
 1797              		.thumb
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 120


 1798              		.syntax unified
 1799              	.L166:
 1800 0022 FEE7     		b	.L166
 1801              	.L165:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1802              		.loc 1 2521 0 discriminator 2
 1803 0024 344A     		ldr	r2, .L186+8
 1804 0026 1168     		ldr	r1, [r2]
 1805              	.LVL174:
 1806 0028 344B     		ldr	r3, .L186+12
 1807 002a 1868     		ldr	r0, [r3]
 1808 002c 1060     		str	r0, [r2]
 1809 002e 1960     		str	r1, [r3]
 1810 0030 334A     		ldr	r2, .L186+16
 1811 0032 1368     		ldr	r3, [r2]
 1812 0034 0133     		adds	r3, r3, #1
 1813 0036 1360     		str	r3, [r2]
 1814 0038 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1815              	.LVL175:
 1816              	.L164:
 1817              	.LBE5:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1818              		.loc 1 2532 0 is_stmt 1
 1819 003c 314B     		ldr	r3, .L186+20
 1820 003e 1B68     		ldr	r3, [r3]
 1821 0040 9D42     		cmp	r5, r3
 1822 0042 3DD2     		bcs	.L178
 1823              	.LBE4:
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1824              		.loc 1 2503 0
 1825 0044 0024     		movs	r4, #0
 1826              	.LVL176:
 1827              	.L168:
 1828              	.LBB6:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1829              		.loc 1 2615 0
 1830 0046 304B     		ldr	r3, .L186+24
 1831 0048 1B68     		ldr	r3, [r3]
 1832 004a DA6A     		ldr	r2, [r3, #44]
 1833 004c 9300     		lsls	r3, r2, #2
 1834 004e 9B18     		adds	r3, r3, r2
 1835 0050 9A00     		lsls	r2, r3, #2
 1836 0052 2E4B     		ldr	r3, .L186+28
 1837 0054 D358     		ldr	r3, [r2, r3]
 1838 0056 012B     		cmp	r3, #1
 1839 0058 43D9     		bls	.L176
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1840              		.loc 1 2617 0
 1841 005a 0124     		movs	r4, #1
 1842              	.LVL177:
 1843 005c 41E0     		b	.L176
 1844              	.LVL178:
 1845              	.L180:
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1846              		.loc 1 2598 0
 1847 005e 0124     		movs	r4, #1
 1848              	.LVL179:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 121


 1849              	.L167:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1850              		.loc 1 2536 0
 1851 0060 254B     		ldr	r3, .L186+8
 1852 0062 1B68     		ldr	r3, [r3]
 1853 0064 1B68     		ldr	r3, [r3]
 1854 0066 002B     		cmp	r3, #0
 1855 0068 2CD0     		beq	.L183
 1856 006a 0023     		movs	r3, #0
 1857              	.L169:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1858              		.loc 1 2536 0 is_stmt 0 discriminator 4
 1859 006c 002B     		cmp	r3, #0
 1860 006e 2BD1     		bne	.L184
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1861              		.loc 1 2552 0 is_stmt 1
 1862 0070 214B     		ldr	r3, .L186+8
 1863 0072 1B68     		ldr	r3, [r3]
 1864 0074 DB68     		ldr	r3, [r3, #12]
 1865 0076 DE68     		ldr	r6, [r3, #12]
 1866              	.LVL180:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1867              		.loc 1 2553 0
 1868 0078 7368     		ldr	r3, [r6, #4]
 1869              	.LVL181:
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1870              		.loc 1 2555 0
 1871 007a 9D42     		cmp	r5, r3
 1872 007c 29D3     		bcc	.L185
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1873              		.loc 1 2571 0
 1874 007e 371D     		adds	r7, r6, #4
 1875 0080 3800     		movs	r0, r7
 1876 0082 FFF7FEFF 		bl	uxListRemove
 1877              	.LVL182:
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1878              		.loc 1 2575 0
 1879 0086 B36A     		ldr	r3, [r6, #40]
 1880 0088 002B     		cmp	r3, #0
 1881 008a 03D0     		beq	.L172
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1882              		.loc 1 2577 0
 1883 008c 3000     		movs	r0, r6
 1884 008e 1830     		adds	r0, r0, #24
 1885 0090 FFF7FEFF 		bl	uxListRemove
 1886              	.LVL183:
 1887              	.L172:
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1888              		.loc 1 2586 0
 1889 0094 F26A     		ldr	r2, [r6, #44]
 1890 0096 1E4B     		ldr	r3, .L186+32
 1891 0098 1B68     		ldr	r3, [r3]
 1892 009a 9A42     		cmp	r2, r3
 1893 009c 01D9     		bls	.L173
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1894              		.loc 1 2586 0 is_stmt 0 discriminator 1
 1895 009e 1C4B     		ldr	r3, .L186+32
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 122


 1896 00a0 1A60     		str	r2, [r3]
 1897              	.L173:
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1898              		.loc 1 2586 0 discriminator 3
 1899 00a2 9300     		lsls	r3, r2, #2
 1900 00a4 9B18     		adds	r3, r3, r2
 1901 00a6 9A00     		lsls	r2, r3, #2
 1902 00a8 1848     		ldr	r0, .L186+28
 1903 00aa 8018     		adds	r0, r0, r2
 1904 00ac 3900     		movs	r1, r7
 1905 00ae FFF7FEFF 		bl	vListInsertEnd
 1906              	.LVL184:
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1907              		.loc 1 2596 0 is_stmt 1 discriminator 3
 1908 00b2 F26A     		ldr	r2, [r6, #44]
 1909 00b4 144B     		ldr	r3, .L186+24
 1910 00b6 1B68     		ldr	r3, [r3]
 1911 00b8 DB6A     		ldr	r3, [r3, #44]
 1912 00ba 9A42     		cmp	r2, r3
 1913 00bc CFD2     		bcs	.L180
 1914 00be CFE7     		b	.L167
 1915              	.LVL185:
 1916              	.L178:
 1917 00c0 0024     		movs	r4, #0
 1918 00c2 CDE7     		b	.L167
 1919              	.LVL186:
 1920              	.L183:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1921              		.loc 1 2536 0
 1922 00c4 0133     		adds	r3, r3, #1
 1923 00c6 D1E7     		b	.L169
 1924              	.L184:
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 1925              		.loc 1 2543 0
 1926 00c8 0122     		movs	r2, #1
 1927 00ca 5242     		rsbs	r2, r2, #0
 1928 00cc 0D4B     		ldr	r3, .L186+20
 1929 00ce 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1930              		.loc 1 2544 0
 1931 00d0 B9E7     		b	.L168
 1932              	.LVL187:
 1933              	.L185:
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 1934              		.loc 1 2562 0
 1935 00d2 0C4A     		ldr	r2, .L186+20
 1936 00d4 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1937              		.loc 1 2563 0
 1938 00d6 B6E7     		b	.L168
 1939              	.LVL188:
 1940              	.L163:
 1941              	.LBE6:
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1942              		.loc 1 2643 0
 1943 00d8 0E4A     		ldr	r2, .L186+36
 1944 00da 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 123


 1945 00dc 0133     		adds	r3, r3, #1
 1946 00de 1360     		str	r3, [r2]
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1947              		.loc 1 2503 0
 1948 00e0 0024     		movs	r4, #0
 1949              	.LVL189:
 1950              	.L176:
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1951              		.loc 1 2656 0
 1952 00e2 0D4B     		ldr	r3, .L186+40
 1953 00e4 1B68     		ldr	r3, [r3]
 1954 00e6 002B     		cmp	r3, #0
 1955 00e8 00D0     		beq	.L162
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1956              		.loc 1 2658 0
 1957 00ea 0124     		movs	r4, #1
 1958              	.LVL190:
 1959              	.L162:
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1960              		.loc 1 2668 0
 1961 00ec 2000     		movs	r0, r4
 1962              		@ sp needed
 1963 00ee F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1964              	.L187:
 1965              		.align	2
 1966              	.L186:
 1967 00f0 00000000 		.word	.LANCHOR16
 1968 00f4 00000000 		.word	.LANCHOR14
 1969 00f8 00000000 		.word	.LANCHOR2
 1970 00fc 00000000 		.word	.LANCHOR8
 1971 0100 00000000 		.word	.LANCHOR18
 1972 0104 00000000 		.word	.LANCHOR3
 1973 0108 00000000 		.word	.LANCHOR10
 1974 010c 00000000 		.word	.LANCHOR4
 1975 0110 00000000 		.word	.LANCHOR13
 1976 0114 00000000 		.word	.LANCHOR19
 1977 0118 00000000 		.word	.LANCHOR20
 1978              		.cfi_endproc
 1979              	.LFE20:
 1981              		.section	.text.xTaskResumeAll,"ax",%progbits
 1982              		.align	1
 1983              		.global	xTaskResumeAll
 1984              		.syntax unified
 1985              		.code	16
 1986              		.thumb_func
 1987              		.fpu softvfp
 1989              	xTaskResumeAll:
 1990              	.LFB15:
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 1991              		.loc 1 2018 0
 1992              		.cfi_startproc
 1993              		@ args = 0, pretend = 0, frame = 0
 1994              		@ frame_needed = 0, uses_anonymous_args = 0
 1995 0000 70B5     		push	{r4, r5, r6, lr}
 1996              	.LCFI18:
 1997              		.cfi_def_cfa_offset 16
 1998              		.cfi_offset 4, -16
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 124


 1999              		.cfi_offset 5, -12
 2000              		.cfi_offset 6, -8
 2001              		.cfi_offset 14, -4
 2002              	.LVL191:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2003              		.loc 1 2024 0
 2004 0002 324B     		ldr	r3, .L205
 2005 0004 1B68     		ldr	r3, [r3]
 2006 0006 002B     		cmp	r3, #0
 2007 0008 01D1     		bne	.L189
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2008              		.loc 1 2024 0 is_stmt 0 discriminator 1
 2009              		.syntax divided
 2010              	@ 2024 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2011 000a 72B6     		 cpsid i 
 2012              	@ 0 "" 2
 2013              		.thumb
 2014              		.syntax unified
 2015              	.L190:
 2016 000c FEE7     		b	.L190
 2017              	.L189:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2018              		.loc 1 2031 0 is_stmt 1
 2019 000e FFF7FEFF 		bl	vPortEnterCritical
 2020              	.LVL192:
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2021              		.loc 1 2033 0
 2022 0012 2E4B     		ldr	r3, .L205
 2023 0014 1A68     		ldr	r2, [r3]
 2024 0016 013A     		subs	r2, r2, #1
 2025 0018 1A60     		str	r2, [r3]
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2026              		.loc 1 2035 0
 2027 001a 1B68     		ldr	r3, [r3]
 2028 001c 002B     		cmp	r3, #0
 2029 001e 50D1     		bne	.L200
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2030              		.loc 1 2037 0
 2031 0020 2B4B     		ldr	r3, .L205+4
 2032 0022 1B68     		ldr	r3, [r3]
 2033 0024 002B     		cmp	r3, #0
 2034 0026 04D1     		bne	.L201
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2035              		.loc 1 2020 0
 2036 0028 0024     		movs	r4, #0
 2037              	.LVL193:
 2038              	.L191:
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2039              		.loc 1 2121 0
 2040 002a FFF7FEFF 		bl	vPortExitCritical
 2041              	.LVL194:
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2042              		.loc 1 2124 0
 2043 002e 2000     		movs	r0, r4
 2044              		@ sp needed
 2045              	.LVL195:
 2046 0030 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 125


 2047              	.LVL196:
 2048              	.L201:
 2049 0032 0024     		movs	r4, #0
 2050              	.LVL197:
 2051              	.L192:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2052              		.loc 1 2041 0
 2053 0034 274B     		ldr	r3, .L205+8
 2054 0036 1B68     		ldr	r3, [r3]
 2055 0038 002B     		cmp	r3, #0
 2056 003a 23D0     		beq	.L203
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2057              		.loc 1 2043 0
 2058 003c 254B     		ldr	r3, .L205+8
 2059 003e DB68     		ldr	r3, [r3, #12]
 2060 0040 DC68     		ldr	r4, [r3, #12]
 2061              	.LVL198:
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2062              		.loc 1 2044 0
 2063 0042 2000     		movs	r0, r4
 2064 0044 1830     		adds	r0, r0, #24
 2065 0046 FFF7FEFF 		bl	uxListRemove
 2066              	.LVL199:
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2067              		.loc 1 2045 0
 2068 004a 251D     		adds	r5, r4, #4
 2069 004c 2800     		movs	r0, r5
 2070 004e FFF7FEFF 		bl	uxListRemove
 2071              	.LVL200:
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2072              		.loc 1 2046 0
 2073 0052 E26A     		ldr	r2, [r4, #44]
 2074 0054 204B     		ldr	r3, .L205+12
 2075 0056 1B68     		ldr	r3, [r3]
 2076 0058 9A42     		cmp	r2, r3
 2077 005a 01D9     		bls	.L193
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2078              		.loc 1 2046 0 is_stmt 0 discriminator 1
 2079 005c 1E4B     		ldr	r3, .L205+12
 2080 005e 1A60     		str	r2, [r3]
 2081              	.L193:
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2082              		.loc 1 2046 0 discriminator 3
 2083 0060 9300     		lsls	r3, r2, #2
 2084 0062 9B18     		adds	r3, r3, r2
 2085 0064 9A00     		lsls	r2, r3, #2
 2086 0066 1D48     		ldr	r0, .L205+16
 2087 0068 8018     		adds	r0, r0, r2
 2088 006a 2900     		movs	r1, r5
 2089 006c FFF7FEFF 		bl	vListInsertEnd
 2090              	.LVL201:
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2091              		.loc 1 2050 0 is_stmt 1 discriminator 3
 2092 0070 1B4B     		ldr	r3, .L205+20
 2093 0072 1B68     		ldr	r3, [r3]
 2094 0074 DB6A     		ldr	r3, [r3, #44]
 2095 0076 E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 126


 2096 0078 9A42     		cmp	r2, r3
 2097 007a DBD3     		bcc	.L192
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2098              		.loc 1 2052 0
 2099 007c 0122     		movs	r2, #1
 2100 007e 194B     		ldr	r3, .L205+24
 2101 0080 1A60     		str	r2, [r3]
 2102 0082 D7E7     		b	.L192
 2103              	.L203:
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2104              		.loc 1 2060 0
 2105 0084 002C     		cmp	r4, #0
 2106 0086 01D0     		beq	.L196
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2107              		.loc 1 2068 0
 2108 0088 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2109              	.LVL202:
 2110              	.L196:
 2111              	.LBB7:
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2112              		.loc 1 2076 0
 2113 008c 164B     		ldr	r3, .L205+28
 2114 008e 1C68     		ldr	r4, [r3]
 2115              	.LVL203:
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2116              		.loc 1 2078 0
 2117 0090 002C     		cmp	r4, #0
 2118 0092 0AD1     		bne	.L199
 2119              	.L197:
 2120              	.LBE7:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2121              		.loc 1 2101 0
 2122 0094 134B     		ldr	r3, .L205+24
 2123 0096 1B68     		ldr	r3, [r3]
 2124 0098 002B     		cmp	r3, #0
 2125 009a 14D0     		beq	.L202
 2126              	.LVL204:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2127              		.loc 1 2108 0
 2128 009c FFF7FEFF 		bl	vPortYield
 2129              	.LVL205:
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2130              		.loc 1 2105 0
 2131 00a0 0124     		movs	r4, #1
 2132              	.LVL206:
 2133 00a2 C2E7     		b	.L191
 2134              	.LVL207:
 2135              	.L198:
 2136              	.LBB8:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2137              		.loc 1 2090 0
 2138 00a4 013C     		subs	r4, r4, #1
 2139              	.LVL208:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2140              		.loc 1 2091 0
 2141 00a6 002C     		cmp	r4, #0
 2142 00a8 07D0     		beq	.L204
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 127


 2143              	.L199:
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2144              		.loc 1 2082 0
 2145 00aa FFF7FEFF 		bl	xTaskIncrementTick
 2146              	.LVL209:
 2147 00ae 0028     		cmp	r0, #0
 2148 00b0 F8D0     		beq	.L198
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2149              		.loc 1 2084 0
 2150 00b2 0122     		movs	r2, #1
 2151 00b4 0B4B     		ldr	r3, .L205+24
 2152 00b6 1A60     		str	r2, [r3]
 2153 00b8 F4E7     		b	.L198
 2154              	.L204:
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2155              		.loc 1 2093 0
 2156 00ba 0022     		movs	r2, #0
 2157 00bc 0A4B     		ldr	r3, .L205+28
 2158 00be 1A60     		str	r2, [r3]
 2159 00c0 E8E7     		b	.L197
 2160              	.LVL210:
 2161              	.L200:
 2162              	.LBE8:
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2163              		.loc 1 2020 0
 2164 00c2 0024     		movs	r4, #0
 2165 00c4 B1E7     		b	.L191
 2166              	.LVL211:
 2167              	.L202:
 2168 00c6 0024     		movs	r4, #0
 2169              	.LVL212:
 2170 00c8 AFE7     		b	.L191
 2171              	.L206:
 2172 00ca C046     		.align	2
 2173              	.L205:
 2174 00cc 00000000 		.word	.LANCHOR16
 2175 00d0 00000000 		.word	.LANCHOR9
 2176 00d4 00000000 		.word	.LANCHOR1
 2177 00d8 00000000 		.word	.LANCHOR13
 2178 00dc 00000000 		.word	.LANCHOR4
 2179 00e0 00000000 		.word	.LANCHOR10
 2180 00e4 00000000 		.word	.LANCHOR20
 2181 00e8 00000000 		.word	.LANCHOR19
 2182              		.cfi_endproc
 2183              	.LFE15:
 2185              		.section	.text.vTaskDelay,"ax",%progbits
 2186              		.align	1
 2187              		.global	vTaskDelay
 2188              		.syntax unified
 2189              		.code	16
 2190              		.thumb_func
 2191              		.fpu softvfp
 2193              	vTaskDelay:
 2194              	.LFB4:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2195              		.loc 1 1225 0
 2196              		.cfi_startproc
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 128


 2197              		@ args = 0, pretend = 0, frame = 0
 2198              		@ frame_needed = 0, uses_anonymous_args = 0
 2199              	.LVL213:
 2200 0000 10B5     		push	{r4, lr}
 2201              	.LCFI19:
 2202              		.cfi_def_cfa_offset 8
 2203              		.cfi_offset 4, -8
 2204              		.cfi_offset 14, -4
 2205 0002 041E     		subs	r4, r0, #0
 2206              	.LVL214:
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2207              		.loc 1 1229 0
 2208 0004 0ED0     		beq	.L212
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2209              		.loc 1 1231 0
 2210 0006 0A4B     		ldr	r3, .L213
 2211 0008 1B68     		ldr	r3, [r3]
 2212 000a 002B     		cmp	r3, #0
 2213 000c 01D0     		beq	.L209
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2214              		.loc 1 1231 0 is_stmt 0 discriminator 1
 2215              		.syntax divided
 2216              	@ 1231 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2217 000e 72B6     		 cpsid i 
 2218              	@ 0 "" 2
 2219              		.thumb
 2220              		.syntax unified
 2221              	.L210:
 2222 0010 FEE7     		b	.L210
 2223              	.L209:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2224              		.loc 1 1232 0 is_stmt 1
 2225 0012 FFF7FEFF 		bl	vTaskSuspendAll
 2226              	.LVL215:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2227              		.loc 1 1243 0
 2228 0016 0021     		movs	r1, #0
 2229 0018 2000     		movs	r0, r4
 2230 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2231              	.LVL216:
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2232              		.loc 1 1245 0
 2233 001e FFF7FEFF 		bl	xTaskResumeAll
 2234              	.LVL217:
 2235 0022 00E0     		b	.L208
 2236              	.LVL218:
 2237              	.L212:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2238              		.loc 1 1226 0
 2239 0024 0020     		movs	r0, #0
 2240              	.LVL219:
 2241              	.L208:
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2242              		.loc 1 1254 0
 2243 0026 0028     		cmp	r0, #0
 2244 0028 01D1     		bne	.L207
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 129


 2245              		.loc 1 1256 0
 2246 002a FFF7FEFF 		bl	vPortYield
 2247              	.LVL220:
 2248              	.L207:
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2249              		.loc 1 1262 0
 2250              		@ sp needed
 2251              	.LVL221:
 2252 002e 10BD     		pop	{r4, pc}
 2253              	.L214:
 2254              		.align	2
 2255              	.L213:
 2256 0030 00000000 		.word	.LANCHOR16
 2257              		.cfi_endproc
 2258              	.LFE4:
 2260              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2261              		.align	1
 2262              		.syntax unified
 2263              		.code	16
 2264              		.thumb_func
 2265              		.fpu softvfp
 2267              	prvCheckTasksWaitingTermination:
 2268              	.LFB31:
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2269              		.loc 1 3366 0
 2270              		.cfi_startproc
 2271              		@ args = 0, pretend = 0, frame = 0
 2272              		@ frame_needed = 0, uses_anonymous_args = 0
 2273 0000 10B5     		push	{r4, lr}
 2274              	.LCFI20:
 2275              		.cfi_def_cfa_offset 8
 2276              		.cfi_offset 4, -8
 2277              		.cfi_offset 14, -4
 2278              	.L217:
 2279              	.LBB9:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2280              		.loc 1 3376 0
 2281 0002 114B     		ldr	r3, .L220
 2282 0004 1B68     		ldr	r3, [r3]
 2283 0006 002B     		cmp	r3, #0
 2284 0008 1DD0     		beq	.L219
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2285              		.loc 1 3378 0
 2286 000a FFF7FEFF 		bl	vTaskSuspendAll
 2287              	.LVL222:
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2288              		.loc 1 3380 0
 2289 000e 0F4B     		ldr	r3, .L220+4
 2290 0010 1C68     		ldr	r4, [r3]
 2291              	.LVL223:
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2292              		.loc 1 3382 0
 2293 0012 FFF7FEFF 		bl	xTaskResumeAll
 2294              	.LVL224:
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2295              		.loc 1 3384 0
 2296 0016 002C     		cmp	r4, #0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 130


 2297 0018 F3D0     		beq	.L217
 2298              	.LBB10:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2299              		.loc 1 3388 0
 2300 001a FFF7FEFF 		bl	vPortEnterCritical
 2301              	.LVL225:
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2302              		.loc 1 3390 0
 2303 001e 0B4B     		ldr	r3, .L220+4
 2304 0020 DB68     		ldr	r3, [r3, #12]
 2305 0022 DC68     		ldr	r4, [r3, #12]
 2306              	.LVL226:
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2307              		.loc 1 3391 0
 2308 0024 201D     		adds	r0, r4, #4
 2309 0026 FFF7FEFF 		bl	uxListRemove
 2310              	.LVL227:
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2311              		.loc 1 3392 0
 2312 002a 094A     		ldr	r2, .L220+8
 2313 002c 1368     		ldr	r3, [r2]
 2314 002e 013B     		subs	r3, r3, #1
 2315 0030 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2316              		.loc 1 3393 0
 2317 0032 054A     		ldr	r2, .L220
 2318 0034 1368     		ldr	r3, [r2]
 2319 0036 013B     		subs	r3, r3, #1
 2320 0038 1360     		str	r3, [r2]
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2321              		.loc 1 3395 0
 2322 003a FFF7FEFF 		bl	vPortExitCritical
 2323              	.LVL228:
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2324              		.loc 1 3397 0
 2325 003e 2000     		movs	r0, r4
 2326 0040 FFF7FEFF 		bl	prvDeleteTCB
 2327              	.LVL229:
 2328              	.LBE10:
 2329 0044 DDE7     		b	.L217
 2330              	.LVL230:
 2331              	.L219:
 2332              	.LBE9:
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2333              		.loc 1 3406 0
 2334              		@ sp needed
 2335 0046 10BD     		pop	{r4, pc}
 2336              	.L221:
 2337              		.align	2
 2338              	.L220:
 2339 0048 00000000 		.word	.LANCHOR15
 2340 004c 00000000 		.word	.LANCHOR7
 2341 0050 00000000 		.word	.LANCHOR9
 2342              		.cfi_endproc
 2343              	.LFE31:
 2345              		.section	.text.prvIdleTask,"ax",%progbits
 2346              		.align	1
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 131


 2347              		.syntax unified
 2348              		.code	16
 2349              		.thumb_func
 2350              		.fpu softvfp
 2352              	prvIdleTask:
 2353              	.LFB29:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 2354              		.loc 1 3132 0
 2355              		.cfi_startproc
 2356              		@ Volatile: function does not return.
 2357              		@ args = 0, pretend = 0, frame = 0
 2358              		@ frame_needed = 0, uses_anonymous_args = 0
 2359              	.LVL231:
 2360 0000 10B5     		push	{r4, lr}
 2361              	.LCFI21:
 2362              		.cfi_def_cfa_offset 8
 2363              		.cfi_offset 4, -8
 2364              		.cfi_offset 14, -4
 2365              	.LVL232:
 2366              	.L223:
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2367              		.loc 1 3143 0
 2368 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2369              	.LVL233:
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2370              		.loc 1 3166 0
 2371 0006 034B     		ldr	r3, .L225
 2372 0008 1B68     		ldr	r3, [r3]
 2373 000a 012B     		cmp	r3, #1
 2374 000c F9D9     		bls	.L223
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2375              		.loc 1 3168 0
 2376 000e FFF7FEFF 		bl	vPortYield
 2377              	.LVL234:
 2378 0012 F6E7     		b	.L223
 2379              	.L226:
 2380              		.align	2
 2381              	.L225:
 2382 0014 00000000 		.word	.LANCHOR4
 2383              		.cfi_endproc
 2384              	.LFE29:
 2386              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2387              		.align	1
 2388              		.global	vTaskSwitchContext
 2389              		.syntax unified
 2390              		.code	16
 2391              		.thumb_func
 2392              		.fpu softvfp
 2394              	vTaskSwitchContext:
 2395              	.LFB21:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2396              		.loc 1 2762 0
 2397              		.cfi_startproc
 2398              		@ args = 0, pretend = 0, frame = 0
 2399              		@ frame_needed = 0, uses_anonymous_args = 0
 2400 0000 10B5     		push	{r4, lr}
 2401              	.LCFI22:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 132


 2402              		.cfi_def_cfa_offset 8
 2403              		.cfi_offset 4, -8
 2404              		.cfi_offset 14, -4
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2405              		.loc 1 2763 0
 2406 0002 1D4B     		ldr	r3, .L239
 2407 0004 1B68     		ldr	r3, [r3]
 2408 0006 002B     		cmp	r3, #0
 2409 0008 0FD1     		bne	.L235
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2410              		.loc 1 2771 0
 2411 000a 0022     		movs	r2, #0
 2412 000c 1B4B     		ldr	r3, .L239+4
 2413 000e 1A60     		str	r2, [r3]
 2414              	.LBB11:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2415              		.loc 1 2806 0
 2416 0010 1B4B     		ldr	r3, .L239+8
 2417 0012 1B68     		ldr	r3, [r3]
 2418              	.LVL235:
 2419              	.L230:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2420              		.loc 1 2806 0 is_stmt 0 discriminator 4
 2421 0014 9A00     		lsls	r2, r3, #2
 2422 0016 D218     		adds	r2, r2, r3
 2423 0018 9100     		lsls	r1, r2, #2
 2424 001a 1A4A     		ldr	r2, .L239+12
 2425 001c 8A58     		ldr	r2, [r1, r2]
 2426 001e 002A     		cmp	r2, #0
 2427 0020 09D1     		bne	.L236
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2428              		.loc 1 2806 0 discriminator 5
 2429 0022 002B     		cmp	r3, #0
 2430 0024 05D0     		beq	.L237
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2431              		.loc 1 2806 0 discriminator 3
 2432 0026 013B     		subs	r3, r3, #1
 2433              	.LVL236:
 2434 0028 F4E7     		b	.L230
 2435              	.LVL237:
 2436              	.L235:
 2437              	.LBE11:
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2438              		.loc 1 2767 0 is_stmt 1
 2439 002a 0122     		movs	r2, #1
 2440 002c 134B     		ldr	r3, .L239+4
 2441 002e 1A60     		str	r2, [r3]
 2442              	.L227:
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2443              		.loc 1 2817 0
 2444              		@ sp needed
 2445 0030 10BD     		pop	{r4, pc}
 2446              	.LVL238:
 2447              	.L237:
 2448              	.LBB14:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2449              		.loc 1 2806 0 discriminator 2
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 133


 2450              		.syntax divided
 2451              	@ 2806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2452 0032 72B6     		 cpsid i 
 2453              	@ 0 "" 2
 2454              		.thumb
 2455              		.syntax unified
 2456              	.L232:
 2457 0034 FEE7     		b	.L232
 2458              	.L236:
 2459              	.LVL239:
 2460              	.LBB12:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2461              		.loc 1 2806 0 is_stmt 0 discriminator 6
 2462 0036 1348     		ldr	r0, .L239+12
 2463 0038 9A00     		lsls	r2, r3, #2
 2464 003a 4118     		adds	r1, r0, r1
 2465 003c 4C68     		ldr	r4, [r1, #4]
 2466 003e 6468     		ldr	r4, [r4, #4]
 2467 0040 4C60     		str	r4, [r1, #4]
 2468 0042 D218     		adds	r2, r2, r3
 2469 0044 9100     		lsls	r1, r2, #2
 2470 0046 0831     		adds	r1, r1, #8
 2471 0048 4018     		adds	r0, r0, r1
 2472 004a 8442     		cmp	r4, r0
 2473 004c 0BD0     		beq	.L238
 2474              	.L234:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2475              		.loc 1 2806 0 discriminator 9
 2476 004e 9A00     		lsls	r2, r3, #2
 2477 0050 D218     		adds	r2, r2, r3
 2478 0052 9100     		lsls	r1, r2, #2
 2479 0054 0B4A     		ldr	r2, .L239+12
 2480 0056 5218     		adds	r2, r2, r1
 2481 0058 5268     		ldr	r2, [r2, #4]
 2482 005a D168     		ldr	r1, [r2, #12]
 2483 005c 0A4A     		ldr	r2, .L239+16
 2484 005e 1160     		str	r1, [r2]
 2485              	.LBE12:
 2486 0060 074A     		ldr	r2, .L239+8
 2487 0062 1360     		str	r3, [r2]
 2488              	.LBE14:
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2489              		.loc 1 2817 0 is_stmt 1 discriminator 9
 2490 0064 E4E7     		b	.L227
 2491              	.L238:
 2492              	.LBB15:
 2493              	.LBB13:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2494              		.loc 1 2806 0 discriminator 7
 2495 0066 6068     		ldr	r0, [r4, #4]
 2496 0068 9A00     		lsls	r2, r3, #2
 2497 006a D218     		adds	r2, r2, r3
 2498 006c 9100     		lsls	r1, r2, #2
 2499 006e 054A     		ldr	r2, .L239+12
 2500 0070 5218     		adds	r2, r2, r1
 2501 0072 5060     		str	r0, [r2, #4]
 2502 0074 EBE7     		b	.L234
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 134


 2503              	.L240:
 2504 0076 C046     		.align	2
 2505              	.L239:
 2506 0078 00000000 		.word	.LANCHOR16
 2507 007c 00000000 		.word	.LANCHOR20
 2508 0080 00000000 		.word	.LANCHOR13
 2509 0084 00000000 		.word	.LANCHOR4
 2510 0088 00000000 		.word	.LANCHOR10
 2511              	.LBE13:
 2512              	.LBE15:
 2513              		.cfi_endproc
 2514              	.LFE21:
 2516              		.section	.text.vTaskSuspend,"ax",%progbits
 2517              		.align	1
 2518              		.global	vTaskSuspend
 2519              		.syntax unified
 2520              		.code	16
 2521              		.thumb_func
 2522              		.fpu softvfp
 2524              	vTaskSuspend:
 2525              	.LFB8:
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2526              		.loc 1 1567 0
 2527              		.cfi_startproc
 2528              		@ args = 0, pretend = 0, frame = 0
 2529              		@ frame_needed = 0, uses_anonymous_args = 0
 2530              	.LVL240:
 2531 0000 70B5     		push	{r4, r5, r6, lr}
 2532              	.LCFI23:
 2533              		.cfi_def_cfa_offset 16
 2534              		.cfi_offset 4, -16
 2535              		.cfi_offset 5, -12
 2536              		.cfi_offset 6, -8
 2537              		.cfi_offset 14, -4
 2538 0002 0400     		movs	r4, r0
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2539              		.loc 1 1570 0
 2540 0004 FFF7FEFF 		bl	vPortEnterCritical
 2541              	.LVL241:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2542              		.loc 1 1574 0
 2543 0008 002C     		cmp	r4, #0
 2544 000a 19D0     		beq	.L251
 2545              	.LVL242:
 2546              	.L242:
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2547              		.loc 1 1580 0 discriminator 4
 2548 000c 251D     		adds	r5, r4, #4
 2549 000e 2800     		movs	r0, r5
 2550 0010 FFF7FEFF 		bl	uxListRemove
 2551              	.LVL243:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2552              		.loc 1 1590 0 discriminator 4
 2553 0014 A36A     		ldr	r3, [r4, #40]
 2554 0016 002B     		cmp	r3, #0
 2555 0018 03D0     		beq	.L243
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 135


 2556              		.loc 1 1592 0
 2557 001a 2000     		movs	r0, r4
 2558 001c 1830     		adds	r0, r0, #24
 2559 001e FFF7FEFF 		bl	uxListRemove
 2560              	.LVL244:
 2561              	.L243:
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2562              		.loc 1 1599 0
 2563 0022 2900     		movs	r1, r5
 2564 0024 1848     		ldr	r0, .L255
 2565 0026 FFF7FEFF 		bl	vListInsertEnd
 2566              	.LVL245:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2567              		.loc 1 1601 0
 2568 002a FFF7FEFF 		bl	vPortExitCritical
 2569              	.LVL246:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2570              		.loc 1 1603 0
 2571 002e 174B     		ldr	r3, .L255+4
 2572 0030 1B68     		ldr	r3, [r3]
 2573 0032 002B     		cmp	r3, #0
 2574 0034 07D1     		bne	.L252
 2575              	.L244:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2576              		.loc 1 1618 0
 2577 0036 164B     		ldr	r3, .L255+8
 2578 0038 1B68     		ldr	r3, [r3]
 2579 003a 9C42     		cmp	r4, r3
 2580 003c 0AD0     		beq	.L253
 2581              	.L241:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2582              		.loc 1 1649 0
 2583              		@ sp needed
 2584              	.LVL247:
 2585              	.LVL248:
 2586 003e 70BD     		pop	{r4, r5, r6, pc}
 2587              	.LVL249:
 2588              	.L251:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2589              		.loc 1 1574 0 discriminator 1
 2590 0040 134B     		ldr	r3, .L255+8
 2591 0042 1C68     		ldr	r4, [r3]
 2592              	.LVL250:
 2593 0044 E2E7     		b	.L242
 2594              	.LVL251:
 2595              	.L252:
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2596              		.loc 1 1607 0
 2597 0046 FFF7FEFF 		bl	vPortEnterCritical
 2598              	.LVL252:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2599              		.loc 1 1609 0
 2600 004a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2601              	.LVL253:
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2602              		.loc 1 1611 0
 2603 004e FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 136


 2604              	.LVL254:
 2605 0052 F0E7     		b	.L244
 2606              	.L253:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2607              		.loc 1 1620 0
 2608 0054 0D4B     		ldr	r3, .L255+4
 2609 0056 1B68     		ldr	r3, [r3]
 2610 0058 002B     		cmp	r3, #0
 2611 005a 08D0     		beq	.L246
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2612              		.loc 1 1623 0
 2613 005c 0D4B     		ldr	r3, .L255+12
 2614 005e 1B68     		ldr	r3, [r3]
 2615 0060 002B     		cmp	r3, #0
 2616 0062 01D0     		beq	.L247
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2617              		.loc 1 1623 0 is_stmt 0 discriminator 1
 2618              		.syntax divided
 2619              	@ 1623 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2620 0064 72B6     		 cpsid i 
 2621              	@ 0 "" 2
 2622              		.thumb
 2623              		.syntax unified
 2624              	.L248:
 2625 0066 FEE7     		b	.L248
 2626              	.L247:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2627              		.loc 1 1624 0 is_stmt 1
 2628 0068 FFF7FEFF 		bl	vPortYield
 2629              	.LVL255:
 2630 006c E7E7     		b	.L241
 2631              	.L246:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2632              		.loc 1 1631 0
 2633 006e 064B     		ldr	r3, .L255
 2634 0070 1A68     		ldr	r2, [r3]
 2635 0072 094B     		ldr	r3, .L255+16
 2636 0074 1B68     		ldr	r3, [r3]
 2637 0076 9A42     		cmp	r2, r3
 2638 0078 02D0     		beq	.L254
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2639              		.loc 1 1641 0
 2640 007a FFF7FEFF 		bl	vTaskSwitchContext
 2641              	.LVL256:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2642              		.loc 1 1649 0
 2643 007e DEE7     		b	.L241
 2644              	.L254:
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2645              		.loc 1 1637 0
 2646 0080 0022     		movs	r2, #0
 2647 0082 034B     		ldr	r3, .L255+8
 2648 0084 1A60     		str	r2, [r3]
 2649 0086 DAE7     		b	.L241
 2650              	.L256:
 2651              		.align	2
 2652              	.L255:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 137


 2653 0088 00000000 		.word	.LANCHOR0
 2654 008c 00000000 		.word	.LANCHOR11
 2655 0090 00000000 		.word	.LANCHOR10
 2656 0094 00000000 		.word	.LANCHOR16
 2657 0098 00000000 		.word	.LANCHOR9
 2658              		.cfi_endproc
 2659              	.LFE8:
 2661              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2662              		.align	1
 2663              		.global	vTaskPlaceOnEventList
 2664              		.syntax unified
 2665              		.code	16
 2666              		.thumb_func
 2667              		.fpu softvfp
 2669              	vTaskPlaceOnEventList:
 2670              	.LFB22:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2671              		.loc 1 2821 0
 2672              		.cfi_startproc
 2673              		@ args = 0, pretend = 0, frame = 0
 2674              		@ frame_needed = 0, uses_anonymous_args = 0
 2675              	.LVL257:
 2676 0000 10B5     		push	{r4, lr}
 2677              	.LCFI24:
 2678              		.cfi_def_cfa_offset 8
 2679              		.cfi_offset 4, -8
 2680              		.cfi_offset 14, -4
 2681 0002 0C00     		movs	r4, r1
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2682              		.loc 1 2822 0
 2683 0004 0028     		cmp	r0, #0
 2684 0006 01D1     		bne	.L258
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2685              		.loc 1 2822 0 is_stmt 0 discriminator 1
 2686              		.syntax divided
 2687              	@ 2822 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2688 0008 72B6     		 cpsid i 
 2689              	@ 0 "" 2
 2690              		.thumb
 2691              		.syntax unified
 2692              	.L259:
 2693 000a FEE7     		b	.L259
 2694              	.L258:
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2695              		.loc 1 2831 0 is_stmt 1
 2696 000c 044B     		ldr	r3, .L260
 2697 000e 1968     		ldr	r1, [r3]
 2698              	.LVL258:
 2699 0010 1831     		adds	r1, r1, #24
 2700 0012 FFF7FEFF 		bl	vListInsert
 2701              	.LVL259:
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2702              		.loc 1 2833 0
 2703 0016 0121     		movs	r1, #1
 2704 0018 2000     		movs	r0, r4
 2705 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2706              	.LVL260:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 138


2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2707              		.loc 1 2834 0
 2708              		@ sp needed
 2709              	.LVL261:
 2710 001e 10BD     		pop	{r4, pc}
 2711              	.L261:
 2712              		.align	2
 2713              	.L260:
 2714 0020 00000000 		.word	.LANCHOR10
 2715              		.cfi_endproc
 2716              	.LFE22:
 2718              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2719              		.align	1
 2720              		.global	vTaskPlaceOnUnorderedEventList
 2721              		.syntax unified
 2722              		.code	16
 2723              		.thumb_func
 2724              		.fpu softvfp
 2726              	vTaskPlaceOnUnorderedEventList:
 2727              	.LFB23:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2728              		.loc 1 2838 0
 2729              		.cfi_startproc
 2730              		@ args = 0, pretend = 0, frame = 0
 2731              		@ frame_needed = 0, uses_anonymous_args = 0
 2732              	.LVL262:
 2733 0000 70B5     		push	{r4, r5, r6, lr}
 2734              	.LCFI25:
 2735              		.cfi_def_cfa_offset 16
 2736              		.cfi_offset 4, -16
 2737              		.cfi_offset 5, -12
 2738              		.cfi_offset 6, -8
 2739              		.cfi_offset 14, -4
 2740 0002 1400     		movs	r4, r2
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2741              		.loc 1 2839 0
 2742 0004 0028     		cmp	r0, #0
 2743 0006 05D0     		beq	.L267
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2744              		.loc 1 2843 0
 2745 0008 0B4B     		ldr	r3, .L268
 2746 000a 1B68     		ldr	r3, [r3]
 2747 000c 002B     		cmp	r3, #0
 2748 000e 03D1     		bne	.L265
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2749              		.loc 1 2843 0 is_stmt 0 discriminator 1
 2750              		.syntax divided
 2751              	@ 2843 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2752 0010 72B6     		 cpsid i 
 2753              	@ 0 "" 2
 2754              		.thumb
 2755              		.syntax unified
 2756              	.L266:
 2757 0012 FEE7     		b	.L266
 2758              	.L267:
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2759              		.loc 1 2839 0 is_stmt 1 discriminator 1
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 139


 2760              		.syntax divided
 2761              	@ 2839 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2762 0014 72B6     		 cpsid i 
 2763              	@ 0 "" 2
 2764              		.thumb
 2765              		.syntax unified
 2766              	.L264:
 2767 0016 FEE7     		b	.L264
 2768              	.L265:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2769              		.loc 1 2848 0
 2770 0018 084A     		ldr	r2, .L268+4
 2771              	.LVL263:
 2772 001a 1568     		ldr	r5, [r2]
 2773 001c 8023     		movs	r3, #128
 2774 001e 1B06     		lsls	r3, r3, #24
 2775 0020 1943     		orrs	r1, r3
 2776              	.LVL264:
 2777 0022 A961     		str	r1, [r5, #24]
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2778              		.loc 1 2855 0
 2779 0024 1168     		ldr	r1, [r2]
 2780 0026 1831     		adds	r1, r1, #24
 2781 0028 FFF7FEFF 		bl	vListInsertEnd
 2782              	.LVL265:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2783              		.loc 1 2857 0
 2784 002c 0121     		movs	r1, #1
 2785 002e 2000     		movs	r0, r4
 2786 0030 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2787              	.LVL266:
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2788              		.loc 1 2858 0
 2789              		@ sp needed
 2790              	.LVL267:
 2791 0034 70BD     		pop	{r4, r5, r6, pc}
 2792              	.L269:
 2793 0036 C046     		.align	2
 2794              	.L268:
 2795 0038 00000000 		.word	.LANCHOR16
 2796 003c 00000000 		.word	.LANCHOR10
 2797              		.cfi_endproc
 2798              	.LFE23:
 2800              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2801              		.align	1
 2802              		.global	xTaskRemoveFromEventList
 2803              		.syntax unified
 2804              		.code	16
 2805              		.thumb_func
 2806              		.fpu softvfp
 2808              	xTaskRemoveFromEventList:
 2809              	.LFB24:
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2810              		.loc 1 2895 0
 2811              		.cfi_startproc
 2812              		@ args = 0, pretend = 0, frame = 0
 2813              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 140


 2814              	.LVL268:
 2815 0000 70B5     		push	{r4, r5, r6, lr}
 2816              	.LCFI26:
 2817              		.cfi_def_cfa_offset 16
 2818              		.cfi_offset 4, -16
 2819              		.cfi_offset 5, -12
 2820              		.cfi_offset 6, -8
 2821              		.cfi_offset 14, -4
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2822              		.loc 1 2912 0
 2823 0002 C368     		ldr	r3, [r0, #12]
 2824 0004 DC68     		ldr	r4, [r3, #12]
 2825              	.LVL269:
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2826              		.loc 1 2913 0
 2827 0006 002C     		cmp	r4, #0
 2828 0008 26D0     		beq	.L278
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2829              		.loc 1 2914 0
 2830 000a 2500     		movs	r5, r4
 2831 000c 1835     		adds	r5, r5, #24
 2832 000e 2800     		movs	r0, r5
 2833              	.LVL270:
 2834 0010 FFF7FEFF 		bl	uxListRemove
 2835              	.LVL271:
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2836              		.loc 1 2916 0
 2837 0014 154B     		ldr	r3, .L279
 2838 0016 1B68     		ldr	r3, [r3]
 2839 0018 002B     		cmp	r3, #0
 2840 001a 1FD1     		bne	.L273
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2841              		.loc 1 2918 0
 2842 001c 251D     		adds	r5, r4, #4
 2843 001e 2800     		movs	r0, r5
 2844 0020 FFF7FEFF 		bl	uxListRemove
 2845              	.LVL272:
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2846              		.loc 1 2919 0
 2847 0024 E26A     		ldr	r2, [r4, #44]
 2848 0026 124B     		ldr	r3, .L279+4
 2849 0028 1B68     		ldr	r3, [r3]
 2850 002a 9A42     		cmp	r2, r3
 2851 002c 01D9     		bls	.L274
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2852              		.loc 1 2919 0 is_stmt 0 discriminator 1
 2853 002e 104B     		ldr	r3, .L279+4
 2854 0030 1A60     		str	r2, [r3]
 2855              	.L274:
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2856              		.loc 1 2919 0 discriminator 3
 2857 0032 9300     		lsls	r3, r2, #2
 2858 0034 9B18     		adds	r3, r3, r2
 2859 0036 9A00     		lsls	r2, r3, #2
 2860 0038 0E48     		ldr	r0, .L279+8
 2861 003a 8018     		adds	r0, r0, r2
 2862 003c 2900     		movs	r1, r5
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 141


 2863 003e FFF7FEFF 		bl	vListInsertEnd
 2864              	.LVL273:
 2865              	.L275:
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2866              		.loc 1 2928 0 is_stmt 1
 2867 0042 E26A     		ldr	r2, [r4, #44]
 2868 0044 0C4B     		ldr	r3, .L279+12
 2869 0046 1B68     		ldr	r3, [r3]
 2870 0048 DB6A     		ldr	r3, [r3, #44]
 2871 004a 9A42     		cmp	r2, r3
 2872 004c 0BD9     		bls	.L277
 2873              	.LVL274:
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2874              		.loc 1 2937 0
 2875 004e 0122     		movs	r2, #1
 2876 0050 0A4B     		ldr	r3, .L279+16
 2877 0052 1A60     		str	r2, [r3]
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2878              		.loc 1 2933 0
 2879 0054 0120     		movs	r0, #1
 2880              	.LVL275:
 2881              	.L270:
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2882              		.loc 1 2959 0
 2883              		@ sp needed
 2884              	.LVL276:
 2885 0056 70BD     		pop	{r4, r5, r6, pc}
 2886              	.LVL277:
 2887              	.L278:
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2888              		.loc 1 2913 0 discriminator 1
 2889              		.syntax divided
 2890              	@ 2913 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2891 0058 72B6     		 cpsid i 
 2892              	@ 0 "" 2
 2893              		.thumb
 2894              		.syntax unified
 2895              	.L272:
 2896 005a FEE7     		b	.L272
 2897              	.LVL278:
 2898              	.L273:
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2899              		.loc 1 2925 0
 2900 005c 2900     		movs	r1, r5
 2901 005e 0848     		ldr	r0, .L279+20
 2902 0060 FFF7FEFF 		bl	vListInsertEnd
 2903              	.LVL279:
 2904 0064 EDE7     		b	.L275
 2905              	.L277:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2906              		.loc 1 2941 0
 2907 0066 0020     		movs	r0, #0
 2908              	.LVL280:
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2909              		.loc 1 2958 0
 2910 0068 F5E7     		b	.L270
 2911              	.L280:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 142


 2912 006a C046     		.align	2
 2913              	.L279:
 2914 006c 00000000 		.word	.LANCHOR16
 2915 0070 00000000 		.word	.LANCHOR13
 2916 0074 00000000 		.word	.LANCHOR4
 2917 0078 00000000 		.word	.LANCHOR10
 2918 007c 00000000 		.word	.LANCHOR20
 2919 0080 00000000 		.word	.LANCHOR1
 2920              		.cfi_endproc
 2921              	.LFE24:
 2923              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2924              		.align	1
 2925              		.global	xTaskRemoveFromUnorderedEventList
 2926              		.syntax unified
 2927              		.code	16
 2928              		.thumb_func
 2929              		.fpu softvfp
 2931              	xTaskRemoveFromUnorderedEventList:
 2932              	.LFB25:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2933              		.loc 1 2963 0
 2934              		.cfi_startproc
 2935              		@ args = 0, pretend = 0, frame = 0
 2936              		@ frame_needed = 0, uses_anonymous_args = 0
 2937              	.LVL281:
 2938 0000 70B5     		push	{r4, r5, r6, lr}
 2939              	.LCFI27:
 2940              		.cfi_def_cfa_offset 16
 2941              		.cfi_offset 4, -16
 2942              		.cfi_offset 5, -12
 2943              		.cfi_offset 6, -8
 2944              		.cfi_offset 14, -4
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2945              		.loc 1 2969 0
 2946 0002 184B     		ldr	r3, .L290
 2947 0004 1B68     		ldr	r3, [r3]
 2948 0006 002B     		cmp	r3, #0
 2949 0008 01D1     		bne	.L282
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2950              		.loc 1 2969 0 is_stmt 0 discriminator 1
 2951              		.syntax divided
 2952              	@ 2969 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2953 000a 72B6     		 cpsid i 
 2954              	@ 0 "" 2
 2955              		.thumb
 2956              		.syntax unified
 2957              	.L283:
 2958 000c FEE7     		b	.L283
 2959              	.L282:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2960              		.loc 1 2972 0 is_stmt 1
 2961 000e 8023     		movs	r3, #128
 2962 0010 1B06     		lsls	r3, r3, #24
 2963 0012 1943     		orrs	r1, r3
 2964              	.LVL282:
 2965 0014 0160     		str	r1, [r0]
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 143


 2966              		.loc 1 2976 0
 2967 0016 C468     		ldr	r4, [r0, #12]
 2968              	.LVL283:
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 2969              		.loc 1 2977 0
 2970 0018 002C     		cmp	r4, #0
 2971 001a 1FD0     		beq	.L289
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2972              		.loc 1 2978 0
 2973 001c FFF7FEFF 		bl	uxListRemove
 2974              	.LVL284:
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2975              		.loc 1 2983 0
 2976 0020 251D     		adds	r5, r4, #4
 2977 0022 2800     		movs	r0, r5
 2978 0024 FFF7FEFF 		bl	uxListRemove
 2979              	.LVL285:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2980              		.loc 1 2984 0
 2981 0028 E26A     		ldr	r2, [r4, #44]
 2982 002a 0F4B     		ldr	r3, .L290+4
 2983 002c 1B68     		ldr	r3, [r3]
 2984 002e 9A42     		cmp	r2, r3
 2985 0030 01D9     		bls	.L286
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2986              		.loc 1 2984 0 is_stmt 0 discriminator 1
 2987 0032 0D4B     		ldr	r3, .L290+4
 2988 0034 1A60     		str	r2, [r3]
 2989              	.L286:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2990              		.loc 1 2984 0 discriminator 3
 2991 0036 9300     		lsls	r3, r2, #2
 2992 0038 9B18     		adds	r3, r3, r2
 2993 003a 9A00     		lsls	r2, r3, #2
 2994 003c 0B48     		ldr	r0, .L290+8
 2995 003e 8018     		adds	r0, r0, r2
 2996 0040 2900     		movs	r1, r5
 2997 0042 FFF7FEFF 		bl	vListInsertEnd
 2998              	.LVL286:
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2999              		.loc 1 2986 0 is_stmt 1 discriminator 3
 3000 0046 E26A     		ldr	r2, [r4, #44]
 3001 0048 094B     		ldr	r3, .L290+12
 3002 004a 1B68     		ldr	r3, [r3]
 3003 004c DB6A     		ldr	r3, [r3, #44]
 3004 004e 9A42     		cmp	r2, r3
 3005 0050 06D9     		bls	.L288
 3006              	.LVL287:
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3007              		.loc 1 2996 0
 3008 0052 0122     		movs	r2, #1
 3009 0054 074B     		ldr	r3, .L290+16
 3010 0056 1A60     		str	r2, [r3]
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3011              		.loc 1 2992 0
 3012 0058 0120     		movs	r0, #1
 3013              	.LVL288:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 144


 3014              	.L281:
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3015              		.loc 1 3004 0
 3016              		@ sp needed
 3017              	.LVL289:
 3018              	.LVL290:
 3019 005a 70BD     		pop	{r4, r5, r6, pc}
 3020              	.LVL291:
 3021              	.L289:
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3022              		.loc 1 2977 0 discriminator 1
 3023              		.syntax divided
 3024              	@ 2977 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3025 005c 72B6     		 cpsid i 
 3026              	@ 0 "" 2
 3027              		.thumb
 3028              		.syntax unified
 3029              	.L285:
 3030 005e FEE7     		b	.L285
 3031              	.LVL292:
 3032              	.L288:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3033              		.loc 1 3000 0
 3034 0060 0020     		movs	r0, #0
 3035              	.LVL293:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3036              		.loc 1 3003 0
 3037 0062 FAE7     		b	.L281
 3038              	.L291:
 3039              		.align	2
 3040              	.L290:
 3041 0064 00000000 		.word	.LANCHOR16
 3042 0068 00000000 		.word	.LANCHOR13
 3043 006c 00000000 		.word	.LANCHOR4
 3044 0070 00000000 		.word	.LANCHOR10
 3045 0074 00000000 		.word	.LANCHOR20
 3046              		.cfi_endproc
 3047              	.LFE25:
 3049              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3050              		.align	1
 3051              		.global	vTaskSetTimeOutState
 3052              		.syntax unified
 3053              		.code	16
 3054              		.thumb_func
 3055              		.fpu softvfp
 3057              	vTaskSetTimeOutState:
 3058              	.LFB26:
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3059              		.loc 1 3008 0
 3060              		.cfi_startproc
 3061              		@ args = 0, pretend = 0, frame = 0
 3062              		@ frame_needed = 0, uses_anonymous_args = 0
 3063              		@ link register save eliminated.
 3064              	.LVL294:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3065              		.loc 1 3009 0
 3066 0000 0028     		cmp	r0, #0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 145


 3067 0002 06D0     		beq	.L295
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3068              		.loc 1 3010 0
 3069 0004 044B     		ldr	r3, .L296
 3070 0006 1B68     		ldr	r3, [r3]
 3071 0008 0360     		str	r3, [r0]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3072              		.loc 1 3011 0
 3073 000a 044B     		ldr	r3, .L296+4
 3074 000c 1B68     		ldr	r3, [r3]
 3075 000e 4360     		str	r3, [r0, #4]
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3076              		.loc 1 3012 0
 3077              		@ sp needed
 3078 0010 7047     		bx	lr
 3079              	.L295:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3080              		.loc 1 3009 0 discriminator 1
 3081              		.syntax divided
 3082              	@ 3009 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3083 0012 72B6     		 cpsid i 
 3084              	@ 0 "" 2
 3085              		.thumb
 3086              		.syntax unified
 3087              	.L294:
 3088 0014 FEE7     		b	.L294
 3089              	.L297:
 3090 0016 C046     		.align	2
 3091              	.L296:
 3092 0018 00000000 		.word	.LANCHOR18
 3093 001c 00000000 		.word	.LANCHOR14
 3094              		.cfi_endproc
 3095              	.LFE26:
 3097              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3098              		.align	1
 3099              		.global	xTaskCheckForTimeOut
 3100              		.syntax unified
 3101              		.code	16
 3102              		.thumb_func
 3103              		.fpu softvfp
 3105              	xTaskCheckForTimeOut:
 3106              	.LFB27:
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3107              		.loc 1 3016 0
 3108              		.cfi_startproc
 3109              		@ args = 0, pretend = 0, frame = 0
 3110              		@ frame_needed = 0, uses_anonymous_args = 0
 3111              	.LVL295:
 3112 0000 70B5     		push	{r4, r5, r6, lr}
 3113              	.LCFI28:
 3114              		.cfi_def_cfa_offset 16
 3115              		.cfi_offset 4, -16
 3116              		.cfi_offset 5, -12
 3117              		.cfi_offset 6, -8
 3118              		.cfi_offset 14, -4
 3119 0002 0400     		movs	r4, r0
 3120 0004 0D00     		movs	r5, r1
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 146


3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3121              		.loc 1 3019 0
 3122 0006 0028     		cmp	r0, #0
 3123 0008 16D0     		beq	.L308
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3124              		.loc 1 3020 0
 3125 000a 0029     		cmp	r1, #0
 3126 000c 16D0     		beq	.L309
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3127              		.loc 1 3022 0
 3128 000e FFF7FEFF 		bl	vPortEnterCritical
 3129              	.LVL296:
 3130              	.LBB16:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3131              		.loc 1 3025 0
 3132 0012 134B     		ldr	r3, .L311
 3133 0014 1968     		ldr	r1, [r3]
 3134              	.LVL297:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3135              		.loc 1 3039 0
 3136 0016 2B68     		ldr	r3, [r5]
 3137 0018 5A1C     		adds	r2, r3, #1
 3138 001a 1CD0     		beq	.L305
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3139              		.loc 1 3049 0
 3140 001c 114A     		ldr	r2, .L311+4
 3141 001e 1268     		ldr	r2, [r2]
 3142 0020 2068     		ldr	r0, [r4]
 3143 0022 9042     		cmp	r0, r2
 3144 0024 02D0     		beq	.L304
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3145              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3146 0026 6268     		ldr	r2, [r4, #4]
 3147 0028 9142     		cmp	r1, r2
 3148 002a 16D2     		bcs	.L306
 3149              	.L304:
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3150              		.loc 1 3058 0 is_stmt 1
 3151 002c 6268     		ldr	r2, [r4, #4]
 3152 002e 881A     		subs	r0, r1, r2
 3153 0030 8342     		cmp	r3, r0
 3154 0032 05D8     		bhi	.L310
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3155              		.loc 1 3067 0
 3156 0034 0124     		movs	r4, #1
 3157              	.LVL298:
 3158 0036 0AE0     		b	.L303
 3159              	.LVL299:
 3160              	.L308:
 3161              	.LBE16:
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3162              		.loc 1 3019 0 discriminator 1
 3163              		.syntax divided
 3164              	@ 3019 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3165 0038 72B6     		 cpsid i 
 3166              	@ 0 "" 2
 3167              		.thumb
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 147


 3168              		.syntax unified
 3169              	.L300:
 3170 003a FEE7     		b	.L300
 3171              	.L309:
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3172              		.loc 1 3020 0 discriminator 1
 3173              		.syntax divided
 3174              	@ 3020 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3175 003c 72B6     		 cpsid i 
 3176              	@ 0 "" 2
 3177              		.thumb
 3178              		.syntax unified
 3179              	.L302:
 3180 003e FEE7     		b	.L302
 3181              	.LVL300:
 3182              	.L310:
 3183              	.LBB17:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3184              		.loc 1 3061 0
 3185 0040 521A     		subs	r2, r2, r1
 3186 0042 9B18     		adds	r3, r3, r2
 3187 0044 2B60     		str	r3, [r5]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3188              		.loc 1 3062 0
 3189 0046 2000     		movs	r0, r4
 3190 0048 FFF7FEFF 		bl	vTaskSetTimeOutState
 3191              	.LVL301:
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3192              		.loc 1 3063 0
 3193 004c 0024     		movs	r4, #0
 3194              	.LVL302:
 3195              	.L303:
 3196              	.LBE17:
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3197              		.loc 1 3070 0
 3198 004e FFF7FEFF 		bl	vPortExitCritical
 3199              	.LVL303:
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3200              		.loc 1 3073 0
 3201 0052 2000     		movs	r0, r4
 3202              		@ sp needed
 3203              	.LVL304:
 3204              	.LVL305:
 3205 0054 70BD     		pop	{r4, r5, r6, pc}
 3206              	.LVL306:
 3207              	.L305:
 3208              	.LBB18:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3209              		.loc 1 3044 0
 3210 0056 0024     		movs	r4, #0
 3211              	.LVL307:
 3212 0058 F9E7     		b	.L303
 3213              	.LVL308:
 3214              	.L306:
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3215              		.loc 1 3056 0
 3216 005a 0124     		movs	r4, #1
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 148


 3217              	.LVL309:
 3218 005c F7E7     		b	.L303
 3219              	.L312:
 3220 005e C046     		.align	2
 3221              	.L311:
 3222 0060 00000000 		.word	.LANCHOR14
 3223 0064 00000000 		.word	.LANCHOR18
 3224              	.LBE18:
 3225              		.cfi_endproc
 3226              	.LFE27:
 3228              		.section	.text.vTaskMissedYield,"ax",%progbits
 3229              		.align	1
 3230              		.global	vTaskMissedYield
 3231              		.syntax unified
 3232              		.code	16
 3233              		.thumb_func
 3234              		.fpu softvfp
 3236              	vTaskMissedYield:
 3237              	.LFB28:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3238              		.loc 1 3077 0
 3239              		.cfi_startproc
 3240              		@ args = 0, pretend = 0, frame = 0
 3241              		@ frame_needed = 0, uses_anonymous_args = 0
 3242              		@ link register save eliminated.
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3243              		.loc 1 3078 0
 3244 0000 0122     		movs	r2, #1
 3245 0002 014B     		ldr	r3, .L314
 3246 0004 1A60     		str	r2, [r3]
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3247              		.loc 1 3079 0
 3248              		@ sp needed
 3249 0006 7047     		bx	lr
 3250              	.L315:
 3251              		.align	2
 3252              	.L314:
 3253 0008 00000000 		.word	.LANCHOR20
 3254              		.cfi_endproc
 3255              	.LFE28:
 3257              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3258              		.align	1
 3259              		.global	xTaskGetCurrentTaskHandle
 3260              		.syntax unified
 3261              		.code	16
 3262              		.thumb_func
 3263              		.fpu softvfp
 3265              	xTaskGetCurrentTaskHandle:
 3266              	.LFB34:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3267              		.loc 1 3662 0
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 0
 3270              		@ frame_needed = 0, uses_anonymous_args = 0
 3271              		@ link register save eliminated.
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3272              		.loc 1 3668 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 149


 3273 0000 014B     		ldr	r3, .L317
 3274 0002 1868     		ldr	r0, [r3]
 3275              	.LVL310:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3276              		.loc 1 3671 0
 3277              		@ sp needed
 3278 0004 7047     		bx	lr
 3279              	.L318:
 3280 0006 C046     		.align	2
 3281              	.L317:
 3282 0008 00000000 		.word	.LANCHOR10
 3283              		.cfi_endproc
 3284              	.LFE34:
 3286              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3287              		.align	1
 3288              		.global	xTaskGetSchedulerState
 3289              		.syntax unified
 3290              		.code	16
 3291              		.thumb_func
 3292              		.fpu softvfp
 3294              	xTaskGetSchedulerState:
 3295              	.LFB35:
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3296              		.loc 1 3679 0
 3297              		.cfi_startproc
 3298              		@ args = 0, pretend = 0, frame = 0
 3299              		@ frame_needed = 0, uses_anonymous_args = 0
 3300              		@ link register save eliminated.
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3301              		.loc 1 3682 0
 3302 0000 064B     		ldr	r3, .L323
 3303 0002 1B68     		ldr	r3, [r3]
 3304 0004 002B     		cmp	r3, #0
 3305 0006 05D0     		beq	.L321
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3306              		.loc 1 3688 0
 3307 0008 054B     		ldr	r3, .L323+4
 3308 000a 1B68     		ldr	r3, [r3]
 3309 000c 002B     		cmp	r3, #0
 3310 000e 03D1     		bne	.L322
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3311              		.loc 1 3690 0
 3312 0010 0220     		movs	r0, #2
 3313              	.L319:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3314              		.loc 1 3699 0
 3315              		@ sp needed
 3316 0012 7047     		bx	lr
 3317              	.L321:
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3318              		.loc 1 3684 0
 3319 0014 0120     		movs	r0, #1
 3320 0016 FCE7     		b	.L319
 3321              	.L322:
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3322              		.loc 1 3694 0
 3323 0018 0020     		movs	r0, #0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 150


 3324              	.LVL311:
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3325              		.loc 1 3698 0
 3326 001a FAE7     		b	.L319
 3327              	.L324:
 3328              		.align	2
 3329              	.L323:
 3330 001c 00000000 		.word	.LANCHOR11
 3331 0020 00000000 		.word	.LANCHOR16
 3332              		.cfi_endproc
 3333              	.LFE35:
 3335              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3336              		.align	1
 3337              		.global	vTaskPriorityInherit
 3338              		.syntax unified
 3339              		.code	16
 3340              		.thumb_func
 3341              		.fpu softvfp
 3343              	vTaskPriorityInherit:
 3344              	.LFB36:
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3345              		.loc 1 3707 0
 3346              		.cfi_startproc
 3347              		@ args = 0, pretend = 0, frame = 0
 3348              		@ frame_needed = 0, uses_anonymous_args = 0
 3349              	.LVL312:
 3350 0000 70B5     		push	{r4, r5, r6, lr}
 3351              	.LCFI29:
 3352              		.cfi_def_cfa_offset 16
 3353              		.cfi_offset 4, -16
 3354              		.cfi_offset 5, -12
 3355              		.cfi_offset 6, -8
 3356              		.cfi_offset 14, -4
 3357 0002 041E     		subs	r4, r0, #0
 3358              	.LVL313:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3359              		.loc 1 3712 0
 3360 0004 1DD0     		beq	.L325
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3361              		.loc 1 3717 0
 3362 0006 C36A     		ldr	r3, [r0, #44]
 3363 0008 1B4A     		ldr	r2, .L334
 3364 000a 1268     		ldr	r2, [r2]
 3365 000c D26A     		ldr	r2, [r2, #44]
 3366 000e 9342     		cmp	r3, r2
 3367 0010 17D2     		bcs	.L325
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3368              		.loc 1 3722 0
 3369 0012 8269     		ldr	r2, [r0, #24]
 3370 0014 002A     		cmp	r2, #0
 3371 0016 05DB     		blt	.L327
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3372              		.loc 1 3724 0
 3373 0018 174A     		ldr	r2, .L334
 3374 001a 1268     		ldr	r2, [r2]
 3375 001c D16A     		ldr	r1, [r2, #44]
 3376 001e 0722     		movs	r2, #7
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 151


 3377 0020 521A     		subs	r2, r2, r1
 3378 0022 8261     		str	r2, [r0, #24]
 3379              	.L327:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3380              		.loc 1 3733 0
 3381 0024 9A00     		lsls	r2, r3, #2
 3382 0026 D318     		adds	r3, r2, r3
 3383 0028 9A00     		lsls	r2, r3, #2
 3384 002a 144B     		ldr	r3, .L334+4
 3385 002c 9B18     		adds	r3, r3, r2
 3386 002e 6269     		ldr	r2, [r4, #20]
 3387 0030 9A42     		cmp	r2, r3
 3388 0032 07D0     		beq	.L332
 3389 0034 0023     		movs	r3, #0
 3390              	.L328:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3391              		.loc 1 3733 0 is_stmt 0 discriminator 4
 3392 0036 002B     		cmp	r3, #0
 3393 0038 06D1     		bne	.L333
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3394              		.loc 1 3751 0 is_stmt 1
 3395 003a 0F4B     		ldr	r3, .L334
 3396 003c 1B68     		ldr	r3, [r3]
 3397 003e DB6A     		ldr	r3, [r3, #44]
 3398 0040 E362     		str	r3, [r4, #44]
 3399              	.LVL314:
 3400              	.L325:
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3401              		.loc 1 3765 0
 3402              		@ sp needed
 3403              	.LVL315:
 3404 0042 70BD     		pop	{r4, r5, r6, pc}
 3405              	.LVL316:
 3406              	.L332:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3407              		.loc 1 3733 0
 3408 0044 0123     		movs	r3, #1
 3409 0046 F6E7     		b	.L328
 3410              	.L333:
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3411              		.loc 1 3735 0
 3412 0048 251D     		adds	r5, r4, #4
 3413 004a 2800     		movs	r0, r5
 3414              	.LVL317:
 3415 004c FFF7FEFF 		bl	uxListRemove
 3416              	.LVL318:
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3417              		.loc 1 3745 0
 3418 0050 094B     		ldr	r3, .L334
 3419 0052 1B68     		ldr	r3, [r3]
 3420 0054 DB6A     		ldr	r3, [r3, #44]
 3421 0056 E362     		str	r3, [r4, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3422              		.loc 1 3746 0
 3423 0058 094A     		ldr	r2, .L334+8
 3424 005a 1268     		ldr	r2, [r2]
 3425 005c 9342     		cmp	r3, r2
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 152


 3426 005e 01D9     		bls	.L330
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3427              		.loc 1 3746 0 is_stmt 0 discriminator 1
 3428 0060 074A     		ldr	r2, .L334+8
 3429 0062 1360     		str	r3, [r2]
 3430              	.L330:
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3431              		.loc 1 3746 0 discriminator 3
 3432 0064 9A00     		lsls	r2, r3, #2
 3433 0066 D318     		adds	r3, r2, r3
 3434 0068 9A00     		lsls	r2, r3, #2
 3435 006a 0448     		ldr	r0, .L334+4
 3436 006c 8018     		adds	r0, r0, r2
 3437 006e 2900     		movs	r1, r5
 3438 0070 FFF7FEFF 		bl	vListInsertEnd
 3439              	.LVL319:
 3440 0074 E5E7     		b	.L325
 3441              	.L335:
 3442 0076 C046     		.align	2
 3443              	.L334:
 3444 0078 00000000 		.word	.LANCHOR10
 3445 007c 00000000 		.word	.LANCHOR4
 3446 0080 00000000 		.word	.LANCHOR13
 3447              		.cfi_endproc
 3448              	.LFE36:
 3450              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3451              		.align	1
 3452              		.global	xTaskPriorityDisinherit
 3453              		.syntax unified
 3454              		.code	16
 3455              		.thumb_func
 3456              		.fpu softvfp
 3458              	xTaskPriorityDisinherit:
 3459              	.LFB37:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3460              		.loc 1 3773 0 is_stmt 1
 3461              		.cfi_startproc
 3462              		@ args = 0, pretend = 0, frame = 0
 3463              		@ frame_needed = 0, uses_anonymous_args = 0
 3464              	.LVL320:
 3465 0000 70B5     		push	{r4, r5, r6, lr}
 3466              	.LCFI30:
 3467              		.cfi_def_cfa_offset 16
 3468              		.cfi_offset 4, -16
 3469              		.cfi_offset 5, -12
 3470              		.cfi_offset 6, -8
 3471              		.cfi_offset 14, -4
 3472 0002 041E     		subs	r4, r0, #0
 3473              	.LVL321:
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3474              		.loc 1 3777 0
 3475 0004 2BD0     		beq	.L343
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3476              		.loc 1 3783 0
 3477 0006 194B     		ldr	r3, .L346
 3478 0008 1B68     		ldr	r3, [r3]
 3479 000a 9842     		cmp	r0, r3
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 153


 3480 000c 01D0     		beq	.L338
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3481              		.loc 1 3783 0 is_stmt 0 discriminator 1
 3482              		.syntax divided
 3483              	@ 3783 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3484 000e 72B6     		 cpsid i 
 3485              	@ 0 "" 2
 3486              		.thumb
 3487              		.syntax unified
 3488              	.L339:
 3489 0010 FEE7     		b	.L339
 3490              	.L338:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3491              		.loc 1 3785 0 is_stmt 1
 3492 0012 836C     		ldr	r3, [r0, #72]
 3493 0014 002B     		cmp	r3, #0
 3494 0016 01D1     		bne	.L340
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3495              		.loc 1 3785 0 is_stmt 0 discriminator 1
 3496              		.syntax divided
 3497              	@ 3785 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3498 0018 72B6     		 cpsid i 
 3499              	@ 0 "" 2
 3500              		.thumb
 3501              		.syntax unified
 3502              	.L341:
 3503 001a FEE7     		b	.L341
 3504              	.L340:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3505              		.loc 1 3786 0 is_stmt 1
 3506 001c 013B     		subs	r3, r3, #1
 3507 001e 8364     		str	r3, [r0, #72]
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3508              		.loc 1 3790 0
 3509 0020 C26A     		ldr	r2, [r0, #44]
 3510 0022 416C     		ldr	r1, [r0, #68]
 3511 0024 8A42     		cmp	r2, r1
 3512 0026 1CD0     		beq	.L344
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3513              		.loc 1 3793 0
 3514 0028 002B     		cmp	r3, #0
 3515 002a 1CD1     		bne	.L345
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3516              		.loc 1 3800 0
 3517 002c 051D     		adds	r5, r0, #4
 3518 002e 2800     		movs	r0, r5
 3519              	.LVL322:
 3520 0030 FFF7FEFF 		bl	uxListRemove
 3521              	.LVL323:
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3522              		.loc 1 3812 0
 3523 0034 636C     		ldr	r3, [r4, #68]
 3524 0036 E362     		str	r3, [r4, #44]
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3525              		.loc 1 3817 0
 3526 0038 0722     		movs	r2, #7
 3527 003a D21A     		subs	r2, r2, r3
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 154


 3528 003c A261     		str	r2, [r4, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3529              		.loc 1 3818 0
 3530 003e 0C4A     		ldr	r2, .L346+4
 3531 0040 1268     		ldr	r2, [r2]
 3532 0042 9342     		cmp	r3, r2
 3533 0044 01D9     		bls	.L342
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3534              		.loc 1 3818 0 is_stmt 0 discriminator 1
 3535 0046 0A4A     		ldr	r2, .L346+4
 3536 0048 1360     		str	r3, [r2]
 3537              	.L342:
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3538              		.loc 1 3818 0 discriminator 3
 3539 004a 9A00     		lsls	r2, r3, #2
 3540 004c D318     		adds	r3, r2, r3
 3541 004e 9A00     		lsls	r2, r3, #2
 3542 0050 0848     		ldr	r0, .L346+8
 3543 0052 8018     		adds	r0, r0, r2
 3544 0054 2900     		movs	r1, r5
 3545 0056 FFF7FEFF 		bl	vListInsertEnd
 3546              	.LVL324:
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3547              		.loc 1 3828 0 is_stmt 1 discriminator 3
 3548 005a 0120     		movs	r0, #1
 3549              	.LVL325:
 3550              	.L336:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3551              		.loc 1 3846 0
 3552              		@ sp needed
 3553              	.LVL326:
 3554 005c 70BD     		pop	{r4, r5, r6, pc}
 3555              	.LVL327:
 3556              	.L343:
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3557              		.loc 1 3775 0
 3558 005e 0020     		movs	r0, #0
 3559              	.LVL328:
 3560 0060 FCE7     		b	.L336
 3561              	.LVL329:
 3562              	.L344:
 3563 0062 0020     		movs	r0, #0
 3564              	.LVL330:
 3565 0064 FAE7     		b	.L336
 3566              	.LVL331:
 3567              	.L345:
 3568 0066 0020     		movs	r0, #0
 3569              	.LVL332:
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3570              		.loc 1 3845 0
 3571 0068 F8E7     		b	.L336
 3572              	.L347:
 3573 006a C046     		.align	2
 3574              	.L346:
 3575 006c 00000000 		.word	.LANCHOR10
 3576 0070 00000000 		.word	.LANCHOR13
 3577 0074 00000000 		.word	.LANCHOR4
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 155


 3578              		.cfi_endproc
 3579              	.LFE37:
 3581              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3582              		.align	1
 3583              		.global	uxTaskResetEventItemValue
 3584              		.syntax unified
 3585              		.code	16
 3586              		.thumb_func
 3587              		.fpu softvfp
 3589              	uxTaskResetEventItemValue:
 3590              	.LFB38:
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 3591              		.loc 1 4163 0
 3592              		.cfi_startproc
 3593              		@ args = 0, pretend = 0, frame = 0
 3594              		@ frame_needed = 0, uses_anonymous_args = 0
 3595              		@ link register save eliminated.
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3596              		.loc 1 4166 0
 3597 0000 044B     		ldr	r3, .L349
 3598 0002 1A68     		ldr	r2, [r3]
 3599 0004 9069     		ldr	r0, [r2, #24]
 3600              	.LVL333:
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3601              		.loc 1 4170 0
 3602 0006 1A68     		ldr	r2, [r3]
 3603 0008 1B68     		ldr	r3, [r3]
 3604 000a D96A     		ldr	r1, [r3, #44]
 3605 000c 0723     		movs	r3, #7
 3606 000e 5B1A     		subs	r3, r3, r1
 3607 0010 9361     		str	r3, [r2, #24]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3608              		.loc 1 4173 0
 3609              		@ sp needed
 3610 0012 7047     		bx	lr
 3611              	.L350:
 3612              		.align	2
 3613              	.L349:
 3614 0014 00000000 		.word	.LANCHOR10
 3615              		.cfi_endproc
 3616              	.LFE38:
 3618              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3619              		.align	1
 3620              		.global	pvTaskIncrementMutexHeldCount
 3621              		.syntax unified
 3622              		.code	16
 3623              		.thumb_func
 3624              		.fpu softvfp
 3626              	pvTaskIncrementMutexHeldCount:
 3627              	.LFB39:
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3628              		.loc 1 4179 0
 3629              		.cfi_startproc
 3630              		@ args = 0, pretend = 0, frame = 0
 3631              		@ frame_needed = 0, uses_anonymous_args = 0
 3632              		@ link register save eliminated.
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 156


 3633              		.loc 1 4182 0
 3634 0000 054B     		ldr	r3, .L353
 3635 0002 1B68     		ldr	r3, [r3]
 3636 0004 002B     		cmp	r3, #0
 3637 0006 04D0     		beq	.L352
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3638              		.loc 1 4184 0
 3639 0008 034B     		ldr	r3, .L353
 3640 000a 1A68     		ldr	r2, [r3]
 3641 000c 936C     		ldr	r3, [r2, #72]
 3642 000e 0133     		adds	r3, r3, #1
 3643 0010 9364     		str	r3, [r2, #72]
 3644              	.L352:
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3645              		.loc 1 4187 0
 3646 0012 014B     		ldr	r3, .L353
 3647 0014 1868     		ldr	r0, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3648              		.loc 1 4188 0
 3649              		@ sp needed
 3650 0016 7047     		bx	lr
 3651              	.L354:
 3652              		.align	2
 3653              	.L353:
 3654 0018 00000000 		.word	.LANCHOR10
 3655              		.cfi_endproc
 3656              	.LFE39:
 3658              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3659              		.align	1
 3660              		.global	ulTaskNotifyTake
 3661              		.syntax unified
 3662              		.code	16
 3663              		.thumb_func
 3664              		.fpu softvfp
 3666              	ulTaskNotifyTake:
 3667              	.LFB40:
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 3668              		.loc 1 4196 0
 3669              		.cfi_startproc
 3670              		@ args = 0, pretend = 0, frame = 0
 3671              		@ frame_needed = 0, uses_anonymous_args = 0
 3672              	.LVL334:
 3673 0000 70B5     		push	{r4, r5, r6, lr}
 3674              	.LCFI31:
 3675              		.cfi_def_cfa_offset 16
 3676              		.cfi_offset 4, -16
 3677              		.cfi_offset 5, -12
 3678              		.cfi_offset 6, -8
 3679              		.cfi_offset 14, -4
 3680 0002 0500     		movs	r5, r0
 3681 0004 0C00     		movs	r4, r1
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3682              		.loc 1 4199 0
 3683 0006 FFF7FEFF 		bl	vPortEnterCritical
 3684              	.LVL335:
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3685              		.loc 1 4202 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 157


 3686 000a 174B     		ldr	r3, .L361
 3687 000c 1B68     		ldr	r3, [r3]
 3688 000e DB6C     		ldr	r3, [r3, #76]
 3689 0010 002B     		cmp	r3, #0
 3690 0012 06D1     		bne	.L356
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3691              		.loc 1 4205 0
 3692 0014 144B     		ldr	r3, .L361
 3693 0016 1A68     		ldr	r2, [r3]
 3694 0018 0121     		movs	r1, #1
 3695 001a 5023     		movs	r3, #80
 3696 001c D154     		strb	r1, [r2, r3]
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3697              		.loc 1 4207 0
 3698 001e 002C     		cmp	r4, #0
 3699 0020 17D1     		bne	.L359
 3700              	.L356:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3701              		.loc 1 4228 0
 3702 0022 FFF7FEFF 		bl	vPortExitCritical
 3703              	.LVL336:
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3704              		.loc 1 4230 0
 3705 0026 FFF7FEFF 		bl	vPortEnterCritical
 3706              	.LVL337:
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3707              		.loc 1 4233 0
 3708 002a 0F4B     		ldr	r3, .L361
 3709 002c 1B68     		ldr	r3, [r3]
 3710 002e DC6C     		ldr	r4, [r3, #76]
 3711              	.LVL338:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3712              		.loc 1 4235 0
 3713 0030 002C     		cmp	r4, #0
 3714 0032 05D0     		beq	.L357
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3715              		.loc 1 4237 0
 3716 0034 002D     		cmp	r5, #0
 3717 0036 12D1     		bne	.L360
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3718              		.loc 1 4243 0
 3719 0038 0B4B     		ldr	r3, .L361
 3720 003a 1B68     		ldr	r3, [r3]
 3721 003c 621E     		subs	r2, r4, #1
 3722 003e DA64     		str	r2, [r3, #76]
 3723              	.L357:
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3724              		.loc 1 4251 0
 3725 0040 094B     		ldr	r3, .L361
 3726 0042 1A68     		ldr	r2, [r3]
 3727 0044 0021     		movs	r1, #0
 3728 0046 5023     		movs	r3, #80
 3729 0048 D154     		strb	r1, [r2, r3]
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3730              		.loc 1 4253 0
 3731 004a FFF7FEFF 		bl	vPortExitCritical
 3732              	.LVL339:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 158


4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3733              		.loc 1 4256 0
 3734 004e 2000     		movs	r0, r4
 3735              		@ sp needed
 3736              	.LVL340:
 3737              	.LVL341:
 3738 0050 70BD     		pop	{r4, r5, r6, pc}
 3739              	.LVL342:
 3740              	.L359:
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3741              		.loc 1 4209 0
 3742 0052 2000     		movs	r0, r4
 3743 0054 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3744              	.LVL343:
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3745              		.loc 1 4216 0
 3746 0058 FFF7FEFF 		bl	vPortYield
 3747              	.LVL344:
 3748 005c E1E7     		b	.L356
 3749              	.LVL345:
 3750              	.L360:
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3751              		.loc 1 4239 0
 3752 005e 024B     		ldr	r3, .L361
 3753 0060 1B68     		ldr	r3, [r3]
 3754 0062 0022     		movs	r2, #0
 3755 0064 DA64     		str	r2, [r3, #76]
 3756 0066 EBE7     		b	.L357
 3757              	.L362:
 3758              		.align	2
 3759              	.L361:
 3760 0068 00000000 		.word	.LANCHOR10
 3761              		.cfi_endproc
 3762              	.LFE40:
 3764              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3765              		.align	1
 3766              		.global	xTaskNotifyWait
 3767              		.syntax unified
 3768              		.code	16
 3769              		.thumb_func
 3770              		.fpu softvfp
 3772              	xTaskNotifyWait:
 3773              	.LFB41:
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3774              		.loc 1 4264 0
 3775              		.cfi_startproc
 3776              		@ args = 0, pretend = 0, frame = 0
 3777              		@ frame_needed = 0, uses_anonymous_args = 0
 3778              	.LVL346:
 3779 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3780              	.LCFI32:
 3781              		.cfi_def_cfa_offset 24
 3782              		.cfi_offset 3, -24
 3783              		.cfi_offset 4, -20
 3784              		.cfi_offset 5, -16
 3785              		.cfi_offset 6, -12
 3786              		.cfi_offset 7, -8
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 159


 3787              		.cfi_offset 14, -4
 3788 0002 0600     		movs	r6, r0
 3789 0004 0F00     		movs	r7, r1
 3790 0006 1400     		movs	r4, r2
 3791 0008 1D00     		movs	r5, r3
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3792              		.loc 1 4267 0
 3793 000a FFF7FEFF 		bl	vPortEnterCritical
 3794              	.LVL347:
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3795              		.loc 1 4270 0
 3796 000e 1C4B     		ldr	r3, .L369
 3797 0010 1A68     		ldr	r2, [r3]
 3798 0012 5023     		movs	r3, #80
 3799 0014 D35C     		ldrb	r3, [r2, r3]
 3800 0016 022B     		cmp	r3, #2
 3801 0018 0AD0     		beq	.L364
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3802              		.loc 1 4275 0
 3803 001a 194A     		ldr	r2, .L369
 3804 001c 1168     		ldr	r1, [r2]
 3805 001e CB6C     		ldr	r3, [r1, #76]
 3806 0020 B343     		bics	r3, r6
 3807 0022 CB64     		str	r3, [r1, #76]
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3808              		.loc 1 4278 0
 3809 0024 1268     		ldr	r2, [r2]
 3810 0026 0121     		movs	r1, #1
 3811 0028 5023     		movs	r3, #80
 3812 002a D154     		strb	r1, [r2, r3]
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3813              		.loc 1 4280 0
 3814 002c 002D     		cmp	r5, #0
 3815 002e 1ED1     		bne	.L368
 3816              	.L364:
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3817              		.loc 1 4301 0
 3818 0030 FFF7FEFF 		bl	vPortExitCritical
 3819              	.LVL348:
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3820              		.loc 1 4303 0
 3821 0034 FFF7FEFF 		bl	vPortEnterCritical
 3822              	.LVL349:
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3823              		.loc 1 4307 0
 3824 0038 002C     		cmp	r4, #0
 3825 003a 03D0     		beq	.L365
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3826              		.loc 1 4311 0
 3827 003c 104B     		ldr	r3, .L369
 3828 003e 1B68     		ldr	r3, [r3]
 3829 0040 DB6C     		ldr	r3, [r3, #76]
 3830 0042 2360     		str	r3, [r4]
 3831              	.L365:
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3832              		.loc 1 4318 0
 3833 0044 0E4B     		ldr	r3, .L369
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 160


 3834 0046 1A68     		ldr	r2, [r3]
 3835 0048 5023     		movs	r3, #80
 3836 004a D35C     		ldrb	r3, [r2, r3]
 3837 004c 012B     		cmp	r3, #1
 3838 004e 14D0     		beq	.L367
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 3839              		.loc 1 4327 0
 3840 0050 0B4B     		ldr	r3, .L369
 3841 0052 1A68     		ldr	r2, [r3]
 3842 0054 D36C     		ldr	r3, [r2, #76]
 3843 0056 BB43     		bics	r3, r7
 3844 0058 D364     		str	r3, [r2, #76]
 3845              	.LVL350:
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3846              		.loc 1 4328 0
 3847 005a 0124     		movs	r4, #1
 3848              	.LVL351:
 3849              	.L366:
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3850              		.loc 1 4331 0
 3851 005c 084B     		ldr	r3, .L369
 3852 005e 1A68     		ldr	r2, [r3]
 3853 0060 0021     		movs	r1, #0
 3854 0062 5023     		movs	r3, #80
 3855 0064 D154     		strb	r1, [r2, r3]
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3856              		.loc 1 4333 0
 3857 0066 FFF7FEFF 		bl	vPortExitCritical
 3858              	.LVL352:
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3859              		.loc 1 4336 0
 3860 006a 2000     		movs	r0, r4
 3861              		@ sp needed
 3862              	.LVL353:
 3863              	.LVL354:
 3864              	.LVL355:
 3865              	.LVL356:
 3866 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3867              	.LVL357:
 3868              	.L368:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3869              		.loc 1 4282 0
 3870 006e 2800     		movs	r0, r5
 3871 0070 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3872              	.LVL358:
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3873              		.loc 1 4289 0
 3874 0074 FFF7FEFF 		bl	vPortYield
 3875              	.LVL359:
 3876 0078 DAE7     		b	.L364
 3877              	.L367:
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3878              		.loc 1 4321 0
 3879 007a 0024     		movs	r4, #0
 3880              	.LVL360:
 3881 007c EEE7     		b	.L366
 3882              	.L370:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 161


 3883 007e C046     		.align	2
 3884              	.L369:
 3885 0080 00000000 		.word	.LANCHOR10
 3886              		.cfi_endproc
 3887              	.LFE41:
 3889              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3890              		.align	1
 3891              		.global	xTaskGenericNotify
 3892              		.syntax unified
 3893              		.code	16
 3894              		.thumb_func
 3895              		.fpu softvfp
 3897              	xTaskGenericNotify:
 3898              	.LFB42:
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3899              		.loc 1 4344 0
 3900              		.cfi_startproc
 3901              		@ args = 0, pretend = 0, frame = 0
 3902              		@ frame_needed = 0, uses_anonymous_args = 0
 3903              	.LVL361:
 3904 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3905              	.LCFI33:
 3906              		.cfi_def_cfa_offset 24
 3907              		.cfi_offset 3, -24
 3908              		.cfi_offset 4, -20
 3909              		.cfi_offset 5, -16
 3910              		.cfi_offset 6, -12
 3911              		.cfi_offset 7, -8
 3912              		.cfi_offset 14, -4
 3913 0002 0400     		movs	r4, r0
 3914 0004 0E00     		movs	r6, r1
 3915 0006 1500     		movs	r5, r2
 3916 0008 1F00     		movs	r7, r3
 3917              	.LVL362:
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 3918              		.loc 1 4349 0
 3919 000a 0028     		cmp	r0, #0
 3920 000c 2DD0     		beq	.L387
 3921              	.LVL363:
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3922              		.loc 1 4352 0
 3923 000e FFF7FEFF 		bl	vPortEnterCritical
 3924              	.LVL364:
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3925              		.loc 1 4354 0
 3926 0012 002F     		cmp	r7, #0
 3927 0014 01D0     		beq	.L374
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3928              		.loc 1 4356 0
 3929 0016 E36C     		ldr	r3, [r4, #76]
 3930 0018 3B60     		str	r3, [r7]
 3931              	.L374:
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3932              		.loc 1 4359 0
 3933 001a 5022     		movs	r2, #80
 3934 001c A35C     		ldrb	r3, [r4, r2]
 3935 001e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 162


 3936              	.LVL365:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3937              		.loc 1 4361 0
 3938 0020 0221     		movs	r1, #2
 3939 0022 A154     		strb	r1, [r4, r2]
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3940              		.loc 1 4363 0
 3941 0024 022D     		cmp	r5, #2
 3942 0026 2BD0     		beq	.L376
 3943 0028 21D8     		bhi	.L377
 3944 002a 012D     		cmp	r5, #1
 3945 002c 30D1     		bne	.L385
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3946              		.loc 1 4366 0
 3947 002e E26C     		ldr	r2, [r4, #76]
 3948 0030 1643     		orrs	r6, r2
 3949              	.LVL366:
 3950 0032 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3951              		.loc 1 4346 0
 3952 0034 0125     		movs	r5, #1
 3953              	.L375:
 3954              	.LVL367:
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3955              		.loc 1 4399 0
 3956 0036 012B     		cmp	r3, #1
 3957 0038 36D1     		bne	.L381
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3958              		.loc 1 4401 0
 3959 003a 261D     		adds	r6, r4, #4
 3960 003c 3000     		movs	r0, r6
 3961 003e FFF7FEFF 		bl	uxListRemove
 3962              	.LVL368:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3963              		.loc 1 4402 0
 3964 0042 E26A     		ldr	r2, [r4, #44]
 3965 0044 1A4B     		ldr	r3, .L388
 3966 0046 1B68     		ldr	r3, [r3]
 3967 0048 9A42     		cmp	r2, r3
 3968 004a 01D9     		bls	.L382
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3969              		.loc 1 4402 0 is_stmt 0 discriminator 1
 3970 004c 184B     		ldr	r3, .L388
 3971 004e 1A60     		str	r2, [r3]
 3972              	.L382:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3973              		.loc 1 4402 0 discriminator 3
 3974 0050 9300     		lsls	r3, r2, #2
 3975 0052 9B18     		adds	r3, r3, r2
 3976 0054 9A00     		lsls	r2, r3, #2
 3977 0056 1748     		ldr	r0, .L388+4
 3978 0058 8018     		adds	r0, r0, r2
 3979 005a 3100     		movs	r1, r6
 3980 005c FFF7FEFF 		bl	vListInsertEnd
 3981              	.LVL369:
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3982              		.loc 1 4405 0 is_stmt 1 discriminator 3
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 163


 3983 0060 A36A     		ldr	r3, [r4, #40]
 3984 0062 002B     		cmp	r3, #0
 3985 0064 18D0     		beq	.L383
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3986              		.loc 1 4405 0 is_stmt 0 discriminator 1
 3987              		.syntax divided
 3988              	@ 4405 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3989 0066 72B6     		 cpsid i 
 3990              	@ 0 "" 2
 3991              		.thumb
 3992              		.syntax unified
 3993              	.L384:
 3994 0068 FEE7     		b	.L384
 3995              	.LVL370:
 3996              	.L387:
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 3997              		.loc 1 4349 0 is_stmt 1 discriminator 1
 3998              		.syntax divided
 3999              	@ 4349 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4000 006a 72B6     		 cpsid i 
 4001              	@ 0 "" 2
 4002              		.thumb
 4003              		.syntax unified
 4004              	.L373:
 4005 006c FEE7     		b	.L373
 4006              	.LVL371:
 4007              	.L377:
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4008              		.loc 1 4363 0
 4009 006e 032D     		cmp	r5, #3
 4010 0070 0BD0     		beq	.L379
 4011 0072 042D     		cmp	r5, #4
 4012 0074 0CD1     		bne	.L385
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4013              		.loc 1 4378 0
 4014 0076 022B     		cmp	r3, #2
 4015 0078 0CD0     		beq	.L386
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4016              		.loc 1 4380 0
 4017 007a E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4018              		.loc 1 4346 0
 4019 007c 0125     		movs	r5, #1
 4020 007e DAE7     		b	.L375
 4021              	.L376:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4022              		.loc 1 4370 0
 4023 0080 E26C     		ldr	r2, [r4, #76]
 4024 0082 0132     		adds	r2, r2, #1
 4025 0084 E264     		str	r2, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4026              		.loc 1 4346 0
 4027 0086 0125     		movs	r5, #1
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4028              		.loc 1 4371 0
 4029 0088 D5E7     		b	.L375
 4030              	.L379:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 164


4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4031              		.loc 1 4374 0
 4032 008a E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4033              		.loc 1 4346 0
 4034 008c 0125     		movs	r5, #1
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4035              		.loc 1 4375 0
 4036 008e D2E7     		b	.L375
 4037              	.L385:
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4038              		.loc 1 4346 0
 4039 0090 0125     		movs	r5, #1
 4040 0092 D0E7     		b	.L375
 4041              	.L386:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4042              		.loc 1 4385 0
 4043 0094 0025     		movs	r5, #0
 4044 0096 CEE7     		b	.L375
 4045              	.LVL372:
 4046              	.L383:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4047              		.loc 1 4423 0
 4048 0098 E26A     		ldr	r2, [r4, #44]
 4049 009a 074B     		ldr	r3, .L388+8
 4050 009c 1B68     		ldr	r3, [r3]
 4051 009e DB6A     		ldr	r3, [r3, #44]
 4052 00a0 9A42     		cmp	r2, r3
 4053 00a2 01D9     		bls	.L381
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4054              		.loc 1 4427 0
 4055 00a4 FFF7FEFF 		bl	vPortYield
 4056              	.LVL373:
 4057              	.L381:
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4058              		.loc 1 4439 0
 4059 00a8 FFF7FEFF 		bl	vPortExitCritical
 4060              	.LVL374:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4061              		.loc 1 4442 0
 4062 00ac 2800     		movs	r0, r5
 4063              		@ sp needed
 4064              	.LVL375:
 4065              	.LVL376:
 4066              	.LVL377:
 4067 00ae F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4068              	.L389:
 4069              		.align	2
 4070              	.L388:
 4071 00b0 00000000 		.word	.LANCHOR13
 4072 00b4 00000000 		.word	.LANCHOR4
 4073 00b8 00000000 		.word	.LANCHOR10
 4074              		.cfi_endproc
 4075              	.LFE42:
 4077              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4078              		.align	1
 4079              		.global	xTaskGenericNotifyFromISR
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 165


 4080              		.syntax unified
 4081              		.code	16
 4082              		.thumb_func
 4083              		.fpu softvfp
 4085              	xTaskGenericNotifyFromISR:
 4086              	.LFB43:
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4087              		.loc 1 4450 0
 4088              		.cfi_startproc
 4089              		@ args = 4, pretend = 0, frame = 8
 4090              		@ frame_needed = 0, uses_anonymous_args = 0
 4091              	.LVL378:
 4092 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4093              	.LCFI34:
 4094              		.cfi_def_cfa_offset 20
 4095              		.cfi_offset 4, -20
 4096              		.cfi_offset 5, -16
 4097              		.cfi_offset 6, -12
 4098              		.cfi_offset 7, -8
 4099              		.cfi_offset 14, -4
 4100 0002 83B0     		sub	sp, sp, #12
 4101              	.LCFI35:
 4102              		.cfi_def_cfa_offset 32
 4103 0004 0400     		movs	r4, r0
 4104 0006 0F00     		movs	r7, r1
 4105 0008 1600     		movs	r6, r2
 4106 000a 1D00     		movs	r5, r3
 4107              	.LVL379:
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4108              		.loc 1 4456 0
 4109 000c 0028     		cmp	r0, #0
 4110 000e 1BD0     		beq	.L409
 4111              	.LVL380:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4112              		.loc 1 4478 0
 4113 0010 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4114              	.LVL381:
 4115 0014 0190     		str	r0, [sp, #4]
 4116              	.LVL382:
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4117              		.loc 1 4480 0
 4118 0016 002D     		cmp	r5, #0
 4119 0018 01D0     		beq	.L393
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4120              		.loc 1 4482 0
 4121 001a E36C     		ldr	r3, [r4, #76]
 4122 001c 2B60     		str	r3, [r5]
 4123              	.L393:
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4124              		.loc 1 4485 0
 4125 001e 5022     		movs	r2, #80
 4126 0020 A35C     		ldrb	r3, [r4, r2]
 4127 0022 DBB2     		uxtb	r3, r3
 4128              	.LVL383:
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4129              		.loc 1 4486 0
 4130 0024 0221     		movs	r1, #2
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 166


 4131 0026 A154     		strb	r1, [r4, r2]
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4132              		.loc 1 4488 0
 4133 0028 022E     		cmp	r6, #2
 4134 002a 18D0     		beq	.L395
 4135 002c 0ED8     		bhi	.L396
 4136 002e 012E     		cmp	r6, #1
 4137 0030 1DD1     		bne	.L407
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4138              		.loc 1 4491 0
 4139 0032 E26C     		ldr	r2, [r4, #76]
 4140 0034 3A43     		orrs	r2, r7
 4141 0036 E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4142              		.loc 1 4453 0
 4143 0038 0127     		movs	r7, #1
 4144              	.LVL384:
 4145              	.L394:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4146              		.loc 1 4524 0
 4147 003a 012B     		cmp	r3, #1
 4148 003c 3ED1     		bne	.L400
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4149              		.loc 1 4527 0
 4150 003e A36A     		ldr	r3, [r4, #40]
 4151              	.LVL385:
 4152 0040 002B     		cmp	r3, #0
 4153 0042 18D0     		beq	.L401
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4154              		.loc 1 4527 0 is_stmt 0 discriminator 1
 4155              		.syntax divided
 4156              	@ 4527 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4157 0044 72B6     		 cpsid i 
 4158              	@ 0 "" 2
 4159              		.thumb
 4160              		.syntax unified
 4161              	.L402:
 4162 0046 FEE7     		b	.L402
 4163              	.LVL386:
 4164              	.L409:
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4165              		.loc 1 4456 0 is_stmt 1 discriminator 1
 4166              		.syntax divided
 4167              	@ 4456 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4168 0048 72B6     		 cpsid i 
 4169              	@ 0 "" 2
 4170              		.thumb
 4171              		.syntax unified
 4172              	.L392:
 4173 004a FEE7     		b	.L392
 4174              	.LVL387:
 4175              	.L396:
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4176              		.loc 1 4488 0
 4177 004c 032E     		cmp	r6, #3
 4178 004e 0BD0     		beq	.L398
 4179 0050 042E     		cmp	r6, #4
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 167


 4180 0052 0CD1     		bne	.L407
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4181              		.loc 1 4503 0
 4182 0054 022B     		cmp	r3, #2
 4183 0056 0CD0     		beq	.L408
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4184              		.loc 1 4505 0
 4185 0058 E764     		str	r7, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4186              		.loc 1 4453 0
 4187 005a 0127     		movs	r7, #1
 4188              	.LVL388:
 4189 005c EDE7     		b	.L394
 4190              	.LVL389:
 4191              	.L395:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4192              		.loc 1 4495 0
 4193 005e E26C     		ldr	r2, [r4, #76]
 4194 0060 0132     		adds	r2, r2, #1
 4195 0062 E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4196              		.loc 1 4453 0
 4197 0064 0127     		movs	r7, #1
 4198              	.LVL390:
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4199              		.loc 1 4496 0
 4200 0066 E8E7     		b	.L394
 4201              	.LVL391:
 4202              	.L398:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4203              		.loc 1 4499 0
 4204 0068 E764     		str	r7, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4205              		.loc 1 4453 0
 4206 006a 0127     		movs	r7, #1
 4207              	.LVL392:
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4208              		.loc 1 4500 0
 4209 006c E5E7     		b	.L394
 4210              	.LVL393:
 4211              	.L407:
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4212              		.loc 1 4453 0
 4213 006e 0127     		movs	r7, #1
 4214              	.LVL394:
 4215 0070 E3E7     		b	.L394
 4216              	.LVL395:
 4217              	.L408:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4218              		.loc 1 4510 0
 4219 0072 0027     		movs	r7, #0
 4220              	.LVL396:
 4221 0074 E1E7     		b	.L394
 4222              	.LVL397:
 4223              	.L401:
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4224              		.loc 1 4529 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 168


 4225 0076 194B     		ldr	r3, .L410
 4226 0078 1B68     		ldr	r3, [r3]
 4227 007a 002B     		cmp	r3, #0
 4228 007c 24D1     		bne	.L403
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4229              		.loc 1 4531 0
 4230 007e 261D     		adds	r6, r4, #4
 4231 0080 3000     		movs	r0, r6
 4232              	.LVL398:
 4233 0082 FFF7FEFF 		bl	uxListRemove
 4234              	.LVL399:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4235              		.loc 1 4532 0
 4236 0086 E26A     		ldr	r2, [r4, #44]
 4237 0088 154B     		ldr	r3, .L410+4
 4238 008a 1B68     		ldr	r3, [r3]
 4239 008c 9A42     		cmp	r2, r3
 4240 008e 01D9     		bls	.L404
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4241              		.loc 1 4532 0 is_stmt 0 discriminator 1
 4242 0090 134B     		ldr	r3, .L410+4
 4243 0092 1A60     		str	r2, [r3]
 4244              	.L404:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4245              		.loc 1 4532 0 discriminator 3
 4246 0094 9300     		lsls	r3, r2, #2
 4247 0096 9B18     		adds	r3, r3, r2
 4248 0098 9A00     		lsls	r2, r3, #2
 4249 009a 1248     		ldr	r0, .L410+8
 4250 009c 8018     		adds	r0, r0, r2
 4251 009e 3100     		movs	r1, r6
 4252 00a0 FFF7FEFF 		bl	vListInsertEnd
 4253              	.LVL400:
 4254              	.L405:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4255              		.loc 1 4541 0 is_stmt 1
 4256 00a4 E26A     		ldr	r2, [r4, #44]
 4257 00a6 104B     		ldr	r3, .L410+12
 4258 00a8 1B68     		ldr	r3, [r3]
 4259 00aa DB6A     		ldr	r3, [r3, #44]
 4260 00ac 9A42     		cmp	r2, r3
 4261 00ae 05D9     		bls	.L400
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4262              		.loc 1 4545 0
 4263 00b0 089B     		ldr	r3, [sp, #32]
 4264 00b2 002B     		cmp	r3, #0
 4265 00b4 0ED0     		beq	.L406
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4266              		.loc 1 4547 0
 4267 00b6 0123     		movs	r3, #1
 4268 00b8 089A     		ldr	r2, [sp, #32]
 4269 00ba 1360     		str	r3, [r2]
 4270              	.L400:
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4271              		.loc 1 4563 0
 4272 00bc 0198     		ldr	r0, [sp, #4]
 4273 00be FFF7FEFF 		bl	vClearInterruptMaskFromISR
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 169


 4274              	.LVL401:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4275              		.loc 1 4566 0
 4276 00c2 3800     		movs	r0, r7
 4277 00c4 03B0     		add	sp, sp, #12
 4278              		@ sp needed
 4279              	.LVL402:
 4280              	.LVL403:
 4281              	.LVL404:
 4282 00c6 F0BD     		pop	{r4, r5, r6, r7, pc}
 4283              	.LVL405:
 4284              	.L403:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4285              		.loc 1 4538 0
 4286 00c8 2100     		movs	r1, r4
 4287 00ca 1831     		adds	r1, r1, #24
 4288 00cc 0748     		ldr	r0, .L410+16
 4289              	.LVL406:
 4290 00ce FFF7FEFF 		bl	vListInsertEnd
 4291              	.LVL407:
 4292 00d2 E7E7     		b	.L405
 4293              	.L406:
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4294              		.loc 1 4554 0
 4295 00d4 0122     		movs	r2, #1
 4296 00d6 064B     		ldr	r3, .L410+20
 4297 00d8 1A60     		str	r2, [r3]
 4298 00da EFE7     		b	.L400
 4299              	.L411:
 4300              		.align	2
 4301              	.L410:
 4302 00dc 00000000 		.word	.LANCHOR16
 4303 00e0 00000000 		.word	.LANCHOR13
 4304 00e4 00000000 		.word	.LANCHOR4
 4305 00e8 00000000 		.word	.LANCHOR10
 4306 00ec 00000000 		.word	.LANCHOR1
 4307 00f0 00000000 		.word	.LANCHOR20
 4308              		.cfi_endproc
 4309              	.LFE43:
 4311              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4312              		.align	1
 4313              		.global	vTaskNotifyGiveFromISR
 4314              		.syntax unified
 4315              		.code	16
 4316              		.thumb_func
 4317              		.fpu softvfp
 4319              	vTaskNotifyGiveFromISR:
 4320              	.LFB44:
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4321              		.loc 1 4574 0
 4322              		.cfi_startproc
 4323              		@ args = 0, pretend = 0, frame = 0
 4324              		@ frame_needed = 0, uses_anonymous_args = 0
 4325              	.LVL408:
 4326 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4327              	.LCFI36:
 4328              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 170


 4329              		.cfi_offset 3, -24
 4330              		.cfi_offset 4, -20
 4331              		.cfi_offset 5, -16
 4332              		.cfi_offset 6, -12
 4333              		.cfi_offset 7, -8
 4334              		.cfi_offset 14, -4
 4335 0002 0400     		movs	r4, r0
 4336 0004 0F00     		movs	r7, r1
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4337              		.loc 1 4579 0
 4338 0006 0028     		cmp	r0, #0
 4339 0008 10D0     		beq	.L422
 4340              	.LVL409:
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4341              		.loc 1 4601 0
 4342 000a FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4343              	.LVL410:
 4344 000e 0600     		movs	r6, r0
 4345              	.LVL411:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4346              		.loc 1 4603 0
 4347 0010 5023     		movs	r3, #80
 4348 0012 E25C     		ldrb	r2, [r4, r3]
 4349              	.LVL412:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4350              		.loc 1 4604 0
 4351 0014 0221     		movs	r1, #2
 4352 0016 E154     		strb	r1, [r4, r3]
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4353              		.loc 1 4608 0
 4354 0018 E36C     		ldr	r3, [r4, #76]
 4355 001a 0133     		adds	r3, r3, #1
 4356 001c E364     		str	r3, [r4, #76]
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4357              		.loc 1 4614 0
 4358 001e 012A     		cmp	r2, #1
 4359 0020 27D1     		bne	.L415
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4360              		.loc 1 4617 0
 4361 0022 A36A     		ldr	r3, [r4, #40]
 4362 0024 002B     		cmp	r3, #0
 4363 0026 03D0     		beq	.L416
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4364              		.loc 1 4617 0 is_stmt 0 discriminator 1
 4365              		.syntax divided
 4366              	@ 4617 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4367 0028 72B6     		 cpsid i 
 4368              	@ 0 "" 2
 4369              		.thumb
 4370              		.syntax unified
 4371              	.L417:
 4372 002a FEE7     		b	.L417
 4373              	.LVL413:
 4374              	.L422:
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4375              		.loc 1 4579 0 is_stmt 1 discriminator 1
 4376              		.syntax divided
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 171


 4377              	@ 4579 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4378 002c 72B6     		 cpsid i 
 4379              	@ 0 "" 2
 4380              		.thumb
 4381              		.syntax unified
 4382              	.L414:
 4383 002e FEE7     		b	.L414
 4384              	.LVL414:
 4385              	.L416:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4386              		.loc 1 4619 0
 4387 0030 174B     		ldr	r3, .L423
 4388 0032 1B68     		ldr	r3, [r3]
 4389 0034 002B     		cmp	r3, #0
 4390 0036 20D1     		bne	.L418
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4391              		.loc 1 4621 0
 4392 0038 251D     		adds	r5, r4, #4
 4393 003a 2800     		movs	r0, r5
 4394              	.LVL415:
 4395 003c FFF7FEFF 		bl	uxListRemove
 4396              	.LVL416:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4397              		.loc 1 4622 0
 4398 0040 E26A     		ldr	r2, [r4, #44]
 4399 0042 144B     		ldr	r3, .L423+4
 4400 0044 1B68     		ldr	r3, [r3]
 4401 0046 9A42     		cmp	r2, r3
 4402 0048 01D9     		bls	.L419
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4403              		.loc 1 4622 0 is_stmt 0 discriminator 1
 4404 004a 124B     		ldr	r3, .L423+4
 4405 004c 1A60     		str	r2, [r3]
 4406              	.L419:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4407              		.loc 1 4622 0 discriminator 3
 4408 004e 9300     		lsls	r3, r2, #2
 4409 0050 9B18     		adds	r3, r3, r2
 4410 0052 9A00     		lsls	r2, r3, #2
 4411 0054 1048     		ldr	r0, .L423+8
 4412 0056 8018     		adds	r0, r0, r2
 4413 0058 2900     		movs	r1, r5
 4414 005a FFF7FEFF 		bl	vListInsertEnd
 4415              	.LVL417:
 4416              	.L420:
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4417              		.loc 1 4631 0 is_stmt 1
 4418 005e E26A     		ldr	r2, [r4, #44]
 4419 0060 0E4B     		ldr	r3, .L423+12
 4420 0062 1B68     		ldr	r3, [r3]
 4421 0064 DB6A     		ldr	r3, [r3, #44]
 4422 0066 9A42     		cmp	r2, r3
 4423 0068 03D9     		bls	.L415
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4424              		.loc 1 4635 0
 4425 006a 002F     		cmp	r7, #0
 4426 006c 0BD0     		beq	.L421
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 172


4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4427              		.loc 1 4637 0
 4428 006e 0123     		movs	r3, #1
 4429 0070 3B60     		str	r3, [r7]
 4430              	.L415:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4431              		.loc 1 4653 0
 4432 0072 3000     		movs	r0, r6
 4433 0074 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4434              	.LVL418:
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4435              		.loc 1 4654 0
 4436              		@ sp needed
 4437              	.LVL419:
 4438              	.LVL420:
 4439              	.LVL421:
 4440 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4441              	.LVL422:
 4442              	.L418:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4443              		.loc 1 4628 0
 4444 007a 2100     		movs	r1, r4
 4445 007c 1831     		adds	r1, r1, #24
 4446 007e 0848     		ldr	r0, .L423+16
 4447              	.LVL423:
 4448 0080 FFF7FEFF 		bl	vListInsertEnd
 4449              	.LVL424:
 4450 0084 EBE7     		b	.L420
 4451              	.L421:
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4452              		.loc 1 4644 0
 4453 0086 0122     		movs	r2, #1
 4454 0088 064B     		ldr	r3, .L423+20
 4455 008a 1A60     		str	r2, [r3]
 4456 008c F1E7     		b	.L415
 4457              	.L424:
 4458 008e C046     		.align	2
 4459              	.L423:
 4460 0090 00000000 		.word	.LANCHOR16
 4461 0094 00000000 		.word	.LANCHOR13
 4462 0098 00000000 		.word	.LANCHOR4
 4463 009c 00000000 		.word	.LANCHOR10
 4464 00a0 00000000 		.word	.LANCHOR1
 4465 00a4 00000000 		.word	.LANCHOR20
 4466              		.cfi_endproc
 4467              	.LFE44:
 4469              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4470              		.align	1
 4471              		.global	xTaskNotifyStateClear
 4472              		.syntax unified
 4473              		.code	16
 4474              		.thumb_func
 4475              		.fpu softvfp
 4477              	xTaskNotifyStateClear:
 4478              	.LFB45:
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4479              		.loc 1 4663 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 173


 4480              		.cfi_startproc
 4481              		@ args = 0, pretend = 0, frame = 0
 4482              		@ frame_needed = 0, uses_anonymous_args = 0
 4483              	.LVL425:
 4484 0000 10B5     		push	{r4, lr}
 4485              	.LCFI37:
 4486              		.cfi_def_cfa_offset 8
 4487              		.cfi_offset 4, -8
 4488              		.cfi_offset 14, -4
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4489              		.loc 1 4669 0
 4490 0002 0028     		cmp	r0, #0
 4491 0004 0BD0     		beq	.L430
 4492 0006 0400     		movs	r4, r0
 4493              	.L426:
 4494              	.LVL426:
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4495              		.loc 1 4671 0 discriminator 4
 4496 0008 FFF7FEFF 		bl	vPortEnterCritical
 4497              	.LVL427:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4498              		.loc 1 4673 0 discriminator 4
 4499 000c 5023     		movs	r3, #80
 4500 000e E35C     		ldrb	r3, [r4, r3]
 4501 0010 022B     		cmp	r3, #2
 4502 0012 07D0     		beq	.L431
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4503              		.loc 1 4680 0
 4504 0014 0024     		movs	r4, #0
 4505              	.LVL428:
 4506              	.L427:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4507              		.loc 1 4683 0
 4508 0016 FFF7FEFF 		bl	vPortExitCritical
 4509              	.LVL429:
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4510              		.loc 1 4686 0
 4511 001a 2000     		movs	r0, r4
 4512              		@ sp needed
 4513              	.LVL430:
 4514 001c 10BD     		pop	{r4, pc}
 4515              	.LVL431:
 4516              	.L430:
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4517              		.loc 1 4669 0 discriminator 1
 4518 001e 044B     		ldr	r3, .L432
 4519 0020 1C68     		ldr	r4, [r3]
 4520 0022 F1E7     		b	.L426
 4521              	.LVL432:
 4522              	.L431:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 4523              		.loc 1 4675 0
 4524 0024 0022     		movs	r2, #0
 4525 0026 4E33     		adds	r3, r3, #78
 4526 0028 E254     		strb	r2, [r4, r3]
 4527              	.LVL433:
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 174


 4528              		.loc 1 4676 0
 4529 002a 0124     		movs	r4, #1
 4530              	.LVL434:
 4531 002c F3E7     		b	.L427
 4532              	.L433:
 4533 002e C046     		.align	2
 4534              	.L432:
 4535 0030 00000000 		.word	.LANCHOR10
 4536              		.cfi_endproc
 4537              	.LFE45:
 4539              		.global	pxCurrentTCB
 4540              		.section	.bss.pxCurrentTCB,"aw",%nobits
 4541              		.align	2
 4542              		.set	.LANCHOR10,. + 0
 4545              	pxCurrentTCB:
 4546 0000 00000000 		.space	4
 4547              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 4548              		.align	2
 4549              		.set	.LANCHOR2,. + 0
 4552              	pxDelayedTaskList:
 4553 0000 00000000 		.space	4
 4554              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 4555              		.align	2
 4556              		.set	.LANCHOR8,. + 0
 4559              	pxOverflowDelayedTaskList:
 4560 0000 00000000 		.space	4
 4561              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 4562              		.align	2
 4563              		.set	.LANCHOR4,. + 0
 4566              	pxReadyTasksLists:
 4567 0000 00000000 		.space	140
 4567      00000000 
 4567      00000000 
 4567      00000000 
 4567      00000000 
 4568              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 4569              		.align	2
 4570              		.set	.LANCHOR9,. + 0
 4573              	uxCurrentNumberOfTasks:
 4574 0000 00000000 		.space	4
 4575              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 4576              		.align	2
 4577              		.set	.LANCHOR15,. + 0
 4580              	uxDeletedTasksWaitingCleanUp:
 4581 0000 00000000 		.space	4
 4582              		.section	.bss.uxPendedTicks,"aw",%nobits
 4583              		.align	2
 4584              		.set	.LANCHOR19,. + 0
 4587              	uxPendedTicks:
 4588 0000 00000000 		.space	4
 4589              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 4590              		.align	2
 4591              		.set	.LANCHOR16,. + 0
 4594              	uxSchedulerSuspended:
 4595 0000 00000000 		.space	4
 4596              		.section	.bss.uxTaskNumber,"aw",%nobits
 4597              		.align	2
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 175


 4598              		.set	.LANCHOR12,. + 0
 4601              	uxTaskNumber:
 4602 0000 00000000 		.space	4
 4603              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 4604              		.align	2
 4605              		.set	.LANCHOR13,. + 0
 4608              	uxTopReadyPriority:
 4609 0000 00000000 		.space	4
 4610              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 4611              		.align	2
 4612              		.set	.LANCHOR5,. + 0
 4615              	xDelayedTaskList1:
 4616 0000 00000000 		.space	20
 4616      00000000 
 4616      00000000 
 4616      00000000 
 4616      00000000 
 4617              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 4618              		.align	2
 4619              		.set	.LANCHOR6,. + 0
 4622              	xDelayedTaskList2:
 4623 0000 00000000 		.space	20
 4623      00000000 
 4623      00000000 
 4623      00000000 
 4623      00000000 
 4624              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 4625              		.align	2
 4626              		.set	.LANCHOR17,. + 0
 4629              	xIdleTaskHandle:
 4630 0000 00000000 		.space	4
 4631              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 4632              		.align	2
 4633              		.set	.LANCHOR3,. + 0
 4636              	xNextTaskUnblockTime:
 4637 0000 00000000 		.space	4
 4638              		.section	.bss.xNumOfOverflows,"aw",%nobits
 4639              		.align	2
 4640              		.set	.LANCHOR18,. + 0
 4643              	xNumOfOverflows:
 4644 0000 00000000 		.space	4
 4645              		.section	.bss.xPendingReadyList,"aw",%nobits
 4646              		.align	2
 4647              		.set	.LANCHOR1,. + 0
 4650              	xPendingReadyList:
 4651 0000 00000000 		.space	20
 4651      00000000 
 4651      00000000 
 4651      00000000 
 4651      00000000 
 4652              		.section	.bss.xSchedulerRunning,"aw",%nobits
 4653              		.align	2
 4654              		.set	.LANCHOR11,. + 0
 4657              	xSchedulerRunning:
 4658 0000 00000000 		.space	4
 4659              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 4660              		.align	2
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 176


 4661              		.set	.LANCHOR0,. + 0
 4664              	xSuspendedTaskList:
 4665 0000 00000000 		.space	20
 4665      00000000 
 4665      00000000 
 4665      00000000 
 4665      00000000 
 4666              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 4667              		.align	2
 4668              		.set	.LANCHOR7,. + 0
 4671              	xTasksWaitingTermination:
 4672 0000 00000000 		.space	20
 4672      00000000 
 4672      00000000 
 4672      00000000 
 4672      00000000 
 4673              		.section	.bss.xTickCount,"aw",%nobits
 4674              		.align	2
 4675              		.set	.LANCHOR14,. + 0
 4678              	xTickCount:
 4679 0000 00000000 		.space	4
 4680              		.section	.bss.xYieldPending,"aw",%nobits
 4681              		.align	2
 4682              		.set	.LANCHOR20,. + 0
 4685              	xYieldPending:
 4686 0000 00000000 		.space	4
 4687              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 4688              		.align	2
 4689              	.LC44:
 4690 0000 49444C45 		.ascii	"IDLE\000"
 4690      00
 4691              		.text
 4692              	.Letext0:
 4693              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\lib\\gcc\\arm-none-eab
 4694              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 4695              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 4696              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 4697              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 4698              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 4699              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 4700              		.file 9 "Inc/FreeRTOSConfig.h"
 4701              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 4702              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM0/portmacro.h"
 4703              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 4704              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 4705              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 177


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:16     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:22     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:99     .text.prvTaskIsTaskSuspended:0000003c $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:105    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:111    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:158    .text.prvResetNextTaskUnblockTime:00000030 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:164    .text.prvDeleteTCB:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:170    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:200    .text.prvInitialiseNewTask:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:206    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:333    .text.prvInitialiseNewTask:00000084 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:338    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:344    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:413    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:425    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:431    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:539    .text.prvAddNewTaskToReadyList:00000088 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:549    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:555    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:646    .text.prvAddCurrentTaskToDelayedList:00000064 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:656    .text.xTaskCreate:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:663    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:768    .text.vTaskDelete:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:775    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:899    .text.vTaskDelete:00000084 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:910    .text.uxTaskPriorityGet:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:917    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:959    .text.uxTaskPriorityGet:0000001c $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:964    .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:971    .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1013   .text.uxTaskPriorityGetFromISR:0000001c $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1018   .text.vTaskPrioritySet:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1025   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1194   .text.vTaskPrioritySet:000000b4 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1201   .text.vTaskResume:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1208   .text.vTaskResume:00000000 vTaskResume
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1300   .text.vTaskResume:00000060 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1307   .text.xTaskResumeFromISR:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1314   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1430   .text.xTaskResumeFromISR:00000078 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1439   .text.vTaskStartScheduler:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1446   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1521   .text.vTaskStartScheduler:00000044 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2352   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1531   .text.vTaskEndScheduler:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1538   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1569   .text.vTaskEndScheduler:00000010 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1574   .text.vTaskSuspendAll:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1581   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1599   .text.vTaskSuspendAll:0000000c $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1604   .text.xTaskGetTickCount:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1611   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1628   .text.xTaskGetTickCount:00000008 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1633   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1640   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 178


C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1658   .text.xTaskGetTickCountFromISR:00000008 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1663   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1670   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1686   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1691   .text.pcTaskGetName:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1698   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1741   .text.pcTaskGetName:00000018 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1746   .text.xTaskIncrementTick:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1753   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1967   .text.xTaskIncrementTick:000000f0 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1982   .text.xTaskResumeAll:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:1989   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2174   .text.xTaskResumeAll:000000cc $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2186   .text.vTaskDelay:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2193   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2256   .text.vTaskDelay:00000030 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2261   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2267   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2339   .text.prvCheckTasksWaitingTermination:00000048 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2346   .text.prvIdleTask:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2382   .text.prvIdleTask:00000014 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2387   .text.vTaskSwitchContext:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2394   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2506   .text.vTaskSwitchContext:00000078 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2517   .text.vTaskSuspend:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2524   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2653   .text.vTaskSuspend:00000088 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2662   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2669   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2714   .text.vTaskPlaceOnEventList:00000020 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2719   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2726   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2795   .text.vTaskPlaceOnUnorderedEventList:00000038 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2801   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2808   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2914   .text.xTaskRemoveFromEventList:0000006c $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2924   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:2931   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3041   .text.xTaskRemoveFromUnorderedEventList:00000064 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3050   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3057   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3092   .text.vTaskSetTimeOutState:00000018 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3098   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3105   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3222   .text.xTaskCheckForTimeOut:00000060 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3229   .text.vTaskMissedYield:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3236   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3253   .text.vTaskMissedYield:00000008 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3258   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3265   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3282   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3287   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3294   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3330   .text.xTaskGetSchedulerState:0000001c $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3336   .text.vTaskPriorityInherit:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3343   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3444   .text.vTaskPriorityInherit:00000078 $d
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 179


C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3451   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3458   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3575   .text.xTaskPriorityDisinherit:0000006c $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3582   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3589   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3614   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3619   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3626   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3654   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3659   .text.ulTaskNotifyTake:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3666   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3760   .text.ulTaskNotifyTake:00000068 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3765   .text.xTaskNotifyWait:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3772   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3885   .text.xTaskNotifyWait:00000080 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3890   .text.xTaskGenericNotify:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:3897   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4071   .text.xTaskGenericNotify:000000b0 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4078   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4085   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4302   .text.xTaskGenericNotifyFromISR:000000dc $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4312   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4319   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4460   .text.vTaskNotifyGiveFromISR:00000090 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4470   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4477   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4535   .text.xTaskNotifyStateClear:00000030 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4545   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4541   .bss.pxCurrentTCB:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4548   .bss.pxDelayedTaskList:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4552   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4555   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4559   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4562   .bss.pxReadyTasksLists:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4566   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4569   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4573   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4576   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4580   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4583   .bss.uxPendedTicks:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4587   .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4590   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4594   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4597   .bss.uxTaskNumber:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4601   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4604   .bss.uxTopReadyPriority:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4608   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4611   .bss.xDelayedTaskList1:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4615   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4618   .bss.xDelayedTaskList2:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4622   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4625   .bss.xIdleTaskHandle:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4629   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4632   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4636   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4639   .bss.xNumOfOverflows:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4643   .bss.xNumOfOverflows:00000000 xNumOfOverflows
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s 			page 180


C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4646   .bss.xPendingReadyList:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4650   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4653   .bss.xSchedulerRunning:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4657   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4660   .bss.xSuspendedTaskList:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4664   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4667   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4671   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4674   .bss.xTickCount:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4678   .bss.xTickCount:00000000 xTickCount
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4681   .bss.xYieldPending:00000000 $d
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4685   .bss.xYieldPending:00000000 xYieldPending
C:\Users\Raj\AppData\Local\Temp\ccpRjcVB.s:4688   .rodata.vTaskStartScheduler.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYield
uxListRemove
vListInsert
pvPortMalloc
ulSetInterruptMaskFromISR
vClearInterruptMaskFromISR
xPortStartScheduler
vPortEndScheduler
