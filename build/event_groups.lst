ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"event_groups.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTestWaitCondition,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvTestWaitCondition:
  23              	.LFB9:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    tutorial book, reference manual, or both:                          *
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group. */
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Prevent compiler warnings when trace macros are not used. */
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdFALSE;
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCK
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 635:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and	cannot therefore have any bits set. */
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBit
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 641:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 647:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 648:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 649:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 650:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 654:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 656:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 657:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 661:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 13


 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 665:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 668:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 672:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 675:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 676:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 680:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 683:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  25              		.loc 1 683 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  31              		.loc 1 686 0
  32 0000 002A     		cmp	r2, #0
  33 0002 03D1     		bne	.L2
 687:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 688:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 689:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 690:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  34              		.loc 1 690 0
  35 0004 0142     		tst	r1, r0
  36 0006 06D1     		bne	.L4
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  37              		.loc 1 684 0
  38 0008 0020     		movs	r0, #0
  39              	.LVL1:
  40              	.L1:
 691:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 693:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 694:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 695:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 696:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 697:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 698:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 699:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 700:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 701:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 14


 702:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 703:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 704:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 705:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 706:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 707:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 708:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 709:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 710:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 712:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 714:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
  41              		.loc 1 714 0
  42              		@ sp needed
  43 000a 7047     		bx	lr
  44              	.LVL2:
  45              	.L2:
 703:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
  46              		.loc 1 703 0
  47 000c 0840     		ands	r0, r1
  48              	.LVL3:
  49 000e 8142     		cmp	r1, r0
  50 0010 03D0     		beq	.L5
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  51              		.loc 1 684 0
  52 0012 0020     		movs	r0, #0
  53 0014 F9E7     		b	.L1
  54              	.LVL4:
  55              	.L4:
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  56              		.loc 1 692 0
  57 0016 0120     		movs	r0, #1
  58              	.LVL5:
  59 0018 F7E7     		b	.L1
  60              	.L5:
 705:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  61              		.loc 1 705 0
  62 001a 0120     		movs	r0, #1
  63              	.LVL6:
 713:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
  64              		.loc 1 713 0
  65 001c F5E7     		b	.L1
  66              		.cfi_endproc
  67              	.LFE9:
  69              		.section	.text.xEventGroupCreate,"ax",%progbits
  70              		.align	1
  71              		.global	xEventGroupCreate
  72              		.syntax unified
  73              		.code	16
  74              		.thumb_func
  75              		.fpu softvfp
  77              	xEventGroupCreate:
  78              	.LFB0:
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  79              		.loc 1 175 0
  80              		.cfi_startproc
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 15


  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83 0000 10B5     		push	{r4, lr}
  84              	.LCFI0:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 4, -8
  87              		.cfi_offset 14, -4
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  88              		.loc 1 179 0
  89 0002 1820     		movs	r0, #24
  90 0004 FFF7FEFF 		bl	pvPortMalloc
  91              	.LVL7:
  92 0008 041E     		subs	r4, r0, #0
  93              	.LVL8:
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
  94              		.loc 1 181 0
  95 000a 03D0     		beq	.L7
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  96              		.loc 1 183 0
  97 000c 0023     		movs	r3, #0
  98 000e 08C0     		stmia	r0!, {r3}
  99              	.LVL9:
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 100              		.loc 1 184 0
 101 0010 FFF7FEFF 		bl	vListInitialise
 102              	.LVL10:
 103              	.L7:
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 104              		.loc 1 203 0
 105 0014 2000     		movs	r0, r4
 106              		@ sp needed
 107              	.LVL11:
 108 0016 10BD     		pop	{r4, pc}
 109              		.cfi_endproc
 110              	.LFE0:
 112              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 113              		.align	1
 114              		.global	xEventGroupWaitBits
 115              		.syntax unified
 116              		.code	16
 117              		.thumb_func
 118              		.fpu softvfp
 120              	xEventGroupWaitBits:
 121              	.LFB2:
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 122              		.loc 1 325 0
 123              		.cfi_startproc
 124              		@ args = 4, pretend = 0, frame = 8
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              	.LVL12:
 127 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 128              	.LCFI1:
 129              		.cfi_def_cfa_offset 20
 130              		.cfi_offset 4, -20
 131              		.cfi_offset 5, -16
 132              		.cfi_offset 6, -12
 133              		.cfi_offset 7, -8
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 16


 134              		.cfi_offset 14, -4
 135 0002 D646     		mov	lr, r10
 136 0004 00B5     		push	{lr}
 137              	.LCFI2:
 138              		.cfi_def_cfa_offset 24
 139              		.cfi_offset 10, -24
 140 0006 82B0     		sub	sp, sp, #8
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 32
 143 0008 0600     		movs	r6, r0
 144 000a 0F00     		movs	r7, r1
 145 000c 1500     		movs	r5, r2
 146 000e 0193     		str	r3, [sp, #4]
 147              	.LVL13:
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 148              		.loc 1 333 0
 149 0010 0028     		cmp	r0, #0
 150 0012 05D0     		beq	.L31
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 151              		.loc 1 334 0
 152 0014 0B0E     		lsrs	r3, r1, #24
 153              	.LVL14:
 154 0016 1B06     		lsls	r3, r3, #24
 155 0018 9A46     		mov	r10, r3
 156 001a 03D0     		beq	.L11
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 157              		.loc 1 334 0 is_stmt 0 discriminator 1
 158              		.syntax divided
 159              	@ 334 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 160 001c 72B6     		 cpsid i 
 161              	@ 0 "" 2
 162              		.thumb
 163              		.syntax unified
 164              	.L12:
 165 001e FEE7     		b	.L12
 166              	.LVL15:
 167              	.L31:
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 168              		.loc 1 333 0 is_stmt 1 discriminator 1
 169              		.syntax divided
 170              	@ 333 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 171 0020 72B6     		 cpsid i 
 172              	@ 0 "" 2
 173              		.thumb
 174              		.syntax unified
 175              	.L10:
 176 0022 FEE7     		b	.L10
 177              	.LVL16:
 178              	.L11:
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 179              		.loc 1 335 0
 180 0024 0029     		cmp	r1, #0
 181 0026 01D1     		bne	.L13
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 182              		.loc 1 335 0 is_stmt 0 discriminator 1
 183              		.syntax divided
 184              	@ 335 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 17


 185 0028 72B6     		 cpsid i 
 186              	@ 0 "" 2
 187              		.thumb
 188              		.syntax unified
 189              	.L14:
 190 002a FEE7     		b	.L14
 191              	.L13:
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 192              		.loc 1 338 0 is_stmt 1
 193 002c FFF7FEFF 		bl	xTaskGetSchedulerState
 194              	.LVL17:
 195 0030 0028     		cmp	r0, #0
 196 0032 07D1     		bne	.L26
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 197              		.loc 1 338 0 is_stmt 0 discriminator 2
 198 0034 089B     		ldr	r3, [sp, #32]
 199 0036 002B     		cmp	r3, #0
 200 0038 06D1     		bne	.L27
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 201              		.loc 1 338 0
 202 003a 0133     		adds	r3, r3, #1
 203              	.L15:
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 204              		.loc 1 338 0 discriminator 6
 205 003c 002B     		cmp	r3, #0
 206 003e 05D1     		bne	.L16
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 207              		.loc 1 338 0 discriminator 7
 208              		.syntax divided
 209              	@ 338 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 210 0040 72B6     		 cpsid i 
 211              	@ 0 "" 2
 212              		.thumb
 213              		.syntax unified
 214              	.L17:
 215 0042 FEE7     		b	.L17
 216              	.L26:
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 217              		.loc 1 338 0
 218 0044 0123     		movs	r3, #1
 219 0046 F9E7     		b	.L15
 220              	.L27:
 221 0048 0023     		movs	r3, #0
 222 004a F7E7     		b	.L15
 223              	.L16:
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 224              		.loc 1 342 0 is_stmt 1
 225 004c FFF7FEFF 		bl	vTaskSuspendAll
 226              	.LVL18:
 227              	.LBB2:
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 228              		.loc 1 344 0
 229 0050 3468     		ldr	r4, [r6]
 230              	.LVL19:
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 231              		.loc 1 347 0
 232 0052 019A     		ldr	r2, [sp, #4]
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 18


 233 0054 3900     		movs	r1, r7
 234 0056 2000     		movs	r0, r4
 235 0058 FFF7FEFF 		bl	prvTestWaitCondition
 236              	.LVL20:
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 237              		.loc 1 349 0
 238 005c 0028     		cmp	r0, #0
 239 005e 2AD0     		beq	.L18
 240              	.LVL21:
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 241              		.loc 1 357 0
 242 0060 002D     		cmp	r5, #0
 243 0062 02D0     		beq	.L19
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 244              		.loc 1 359 0
 245 0064 2300     		movs	r3, r4
 246 0066 BB43     		bics	r3, r7
 247 0068 3360     		str	r3, [r6]
 248              	.LVL22:
 249              	.L19:
 250              	.LBE2:
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 251              		.loc 1 409 0
 252 006a FFF7FEFF 		bl	xTaskResumeAll
 253              	.LVL23:
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 254              		.loc 1 411 0
 255 006e 5346     		mov	r3, r10
 256 0070 002B     		cmp	r3, #0
 257 0072 1BD0     		beq	.L8
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 258              		.loc 1 413 0
 259 0074 0028     		cmp	r0, #0
 260 0076 01D1     		bne	.L23
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 261              		.loc 1 415 0
 262 0078 FFF7FEFF 		bl	vPortYield
 263              	.LVL24:
 264              	.L23:
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 265              		.loc 1 426 0
 266 007c FFF7FEFF 		bl	uxTaskResetEventItemValue
 267              	.LVL25:
 268 0080 0400     		movs	r4, r0
 269              	.LVL26:
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 270              		.loc 1 428 0
 271 0082 8301     		lsls	r3, r0, #6
 272 0084 10D4     		bmi	.L24
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 273              		.loc 1 430 0
 274 0086 FFF7FEFF 		bl	vPortEnterCritical
 275              	.LVL27:
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 276              		.loc 1 433 0
 277 008a 3468     		ldr	r4, [r6]
 278              	.LVL28:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 19


 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 279              		.loc 1 437 0
 280 008c 019A     		ldr	r2, [sp, #4]
 281 008e 3900     		movs	r1, r7
 282 0090 2000     		movs	r0, r4
 283 0092 FFF7FEFF 		bl	prvTestWaitCondition
 284              	.LVL29:
 285 0096 0028     		cmp	r0, #0
 286 0098 04D0     		beq	.L25
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 287              		.loc 1 439 0
 288 009a 002D     		cmp	r5, #0
 289 009c 02D0     		beq	.L25
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 290              		.loc 1 441 0
 291 009e 2300     		movs	r3, r4
 292 00a0 BB43     		bics	r3, r7
 293 00a2 3360     		str	r3, [r6]
 294              	.L25:
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 295              		.loc 1 453 0
 296 00a4 FFF7FEFF 		bl	vPortExitCritical
 297              	.LVL30:
 298              	.L24:
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 299              		.loc 1 464 0
 300 00a8 2402     		lsls	r4, r4, #8
 301              	.LVL31:
 302 00aa 240A     		lsrs	r4, r4, #8
 303              	.LVL32:
 304              	.L8:
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 305              		.loc 1 469 0
 306 00ac 2000     		movs	r0, r4
 307 00ae 02B0     		add	sp, sp, #8
 308              		@ sp needed
 309              	.LVL33:
 310              	.LVL34:
 311              	.LVL35:
 312              	.LVL36:
 313              	.LVL37:
 314 00b0 04BC     		pop	{r2}
 315 00b2 9246     		mov	r10, r2
 316 00b4 F0BD     		pop	{r4, r5, r6, r7, pc}
 317              	.LVL38:
 318              	.L18:
 319              	.LBB3:
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 320              		.loc 1 366 0
 321 00b6 089B     		ldr	r3, [sp, #32]
 322 00b8 002B     		cmp	r3, #0
 323 00ba 14D0     		beq	.L29
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 324              		.loc 1 378 0
 325 00bc 002D     		cmp	r5, #0
 326 00be 0FD1     		bne	.L30
 327              	.LBE3:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 20


 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 328              		.loc 1 327 0
 329 00c0 0021     		movs	r1, #0
 330              	.L20:
 331              	.LVL39:
 332              	.LBB4:
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 333              		.loc 1 387 0
 334 00c2 019B     		ldr	r3, [sp, #4]
 335 00c4 002B     		cmp	r3, #0
 336 00c6 02D0     		beq	.L21
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 337              		.loc 1 389 0
 338 00c8 8023     		movs	r3, #128
 339 00ca DB04     		lsls	r3, r3, #19
 340 00cc 1943     		orrs	r1, r3
 341              	.LVL40:
 342              	.L21:
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 343              		.loc 1 399 0
 344 00ce 3943     		orrs	r1, r7
 345              	.LVL41:
 346 00d0 301D     		adds	r0, r6, #4
 347              	.LVL42:
 348 00d2 089A     		ldr	r2, [sp, #32]
 349 00d4 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 350              	.LVL43:
 351 00d8 089B     		ldr	r3, [sp, #32]
 352 00da 9A46     		mov	r10, r3
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 353              		.loc 1 404 0
 354 00dc 0024     		movs	r4, #0
 355              	.LVL44:
 356 00de C4E7     		b	.L19
 357              	.LVL45:
 358              	.L30:
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 359              		.loc 1 380 0
 360 00e0 8021     		movs	r1, #128
 361 00e2 4904     		lsls	r1, r1, #17
 362 00e4 EDE7     		b	.L20
 363              	.L29:
 364 00e6 089B     		ldr	r3, [sp, #32]
 365 00e8 9A46     		mov	r10, r3
 366 00ea BEE7     		b	.L19
 367              	.LBE4:
 368              		.cfi_endproc
 369              	.LFE2:
 371              		.section	.text.xEventGroupClearBits,"ax",%progbits
 372              		.align	1
 373              		.global	xEventGroupClearBits
 374              		.syntax unified
 375              		.code	16
 376              		.thumb_func
 377              		.fpu softvfp
 379              	xEventGroupClearBits:
 380              	.LFB3:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 21


 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 381              		.loc 1 473 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              	.LVL46:
 386 0000 70B5     		push	{r4, r5, r6, lr}
 387              	.LCFI4:
 388              		.cfi_def_cfa_offset 16
 389              		.cfi_offset 4, -16
 390              		.cfi_offset 5, -12
 391              		.cfi_offset 6, -8
 392              		.cfi_offset 14, -4
 393 0002 0400     		movs	r4, r0
 394 0004 0E00     		movs	r6, r1
 395              	.LVL47:
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 396              		.loc 1 479 0
 397 0006 0028     		cmp	r0, #0
 398 0008 03D0     		beq	.L37
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 399              		.loc 1 480 0
 400 000a 0B0E     		lsrs	r3, r1, #24
 401 000c 03D0     		beq	.L35
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 402              		.loc 1 480 0 is_stmt 0 discriminator 1
 403              		.syntax divided
 404              	@ 480 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 405 000e 72B6     		 cpsid i 
 406              	@ 0 "" 2
 407              		.thumb
 408              		.syntax unified
 409              	.L36:
 410 0010 FEE7     		b	.L36
 411              	.L37:
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 412              		.loc 1 479 0 is_stmt 1 discriminator 1
 413              		.syntax divided
 414              	@ 479 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 415 0012 72B6     		 cpsid i 
 416              	@ 0 "" 2
 417              		.thumb
 418              		.syntax unified
 419              	.L34:
 420 0014 FEE7     		b	.L34
 421              	.L35:
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 422              		.loc 1 482 0
 423 0016 FFF7FEFF 		bl	vPortEnterCritical
 424              	.LVL48:
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 425              		.loc 1 488 0
 426 001a 2568     		ldr	r5, [r4]
 427              	.LVL49:
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 428              		.loc 1 491 0
 429 001c 2B00     		movs	r3, r5
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 22


 430 001e B343     		bics	r3, r6
 431 0020 2360     		str	r3, [r4]
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 432              		.loc 1 493 0
 433 0022 FFF7FEFF 		bl	vPortExitCritical
 434              	.LVL50:
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 435              		.loc 1 496 0
 436 0026 2800     		movs	r0, r5
 437              		@ sp needed
 438              	.LVL51:
 439              	.LVL52:
 440              	.LVL53:
 441 0028 70BD     		pop	{r4, r5, r6, pc}
 442              		.cfi_endproc
 443              	.LFE3:
 445              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 446              		.align	1
 447              		.global	xEventGroupGetBitsFromISR
 448              		.syntax unified
 449              		.code	16
 450              		.thumb_func
 451              		.fpu softvfp
 453              	xEventGroupGetBitsFromISR:
 454              	.LFB4:
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 455              		.loc 1 515 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              	.LVL54:
 460 0000 10B5     		push	{r4, lr}
 461              	.LCFI5:
 462              		.cfi_def_cfa_offset 8
 463              		.cfi_offset 4, -8
 464              		.cfi_offset 14, -4
 465 0002 0400     		movs	r4, r0
 466              	.LVL55:
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 467              		.loc 1 520 0
 468 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 469              	.LVL56:
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 470              		.loc 1 522 0
 471 0008 2468     		ldr	r4, [r4]
 472              	.LVL57:
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 473              		.loc 1 524 0
 474 000a FFF7FEFF 		bl	vClearInterruptMaskFromISR
 475              	.LVL58:
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 476              		.loc 1 527 0
 477 000e 2000     		movs	r0, r4
 478              		@ sp needed
 479              	.LVL59:
 480 0010 10BD     		pop	{r4, pc}
 481              		.cfi_endproc
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 23


 482              	.LFE4:
 484              		.section	.text.xEventGroupSetBits,"ax",%progbits
 485              		.align	1
 486              		.global	xEventGroupSetBits
 487              		.syntax unified
 488              		.code	16
 489              		.thumb_func
 490              		.fpu softvfp
 492              	xEventGroupSetBits:
 493              	.LFB5:
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 494              		.loc 1 531 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              	.LVL60:
 499 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 500              	.LCFI6:
 501              		.cfi_def_cfa_offset 24
 502              		.cfi_offset 3, -24
 503              		.cfi_offset 4, -20
 504              		.cfi_offset 5, -16
 505              		.cfi_offset 6, -12
 506              		.cfi_offset 7, -8
 507              		.cfi_offset 14, -4
 508 0002 0400     		movs	r4, r0
 509 0004 0D00     		movs	r5, r1
 510              	.LVL61:
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 511              		.loc 1 541 0
 512 0006 0028     		cmp	r0, #0
 513 0008 03D0     		beq	.L52
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 514              		.loc 1 542 0
 515 000a 0B0E     		lsrs	r3, r1, #24
 516 000c 03D0     		beq	.L42
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 517              		.loc 1 542 0 is_stmt 0 discriminator 1
 518              		.syntax divided
 519              	@ 542 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 520 000e 72B6     		 cpsid i 
 521              	@ 0 "" 2
 522              		.thumb
 523              		.syntax unified
 524              	.L43:
 525 0010 FEE7     		b	.L43
 526              	.L52:
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 527              		.loc 1 541 0 is_stmt 1 discriminator 1
 528              		.syntax divided
 529              	@ 541 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 530 0012 72B6     		 cpsid i 
 531              	@ 0 "" 2
 532              		.thumb
 533              		.syntax unified
 534              	.L41:
 535 0014 FEE7     		b	.L41
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 24


 536              	.L42:
 537              	.LVL62:
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 538              		.loc 1 545 0
 539 0016 0600     		movs	r6, r0
 540 0018 0C36     		adds	r6, r6, #12
 541              	.LVL63:
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 542              		.loc 1 546 0
 543 001a FFF7FEFF 		bl	vTaskSuspendAll
 544              	.LVL64:
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 545              		.loc 1 550 0
 546 001e 2069     		ldr	r0, [r4, #16]
 547              	.LVL65:
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 548              		.loc 1 553 0
 549 0020 2368     		ldr	r3, [r4]
 550 0022 1D43     		orrs	r5, r3
 551              	.LVL66:
 552 0024 2560     		str	r5, [r4]
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 553              		.loc 1 535 0
 554 0026 0025     		movs	r5, #0
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 555              		.loc 1 556 0
 556 0028 10E0     		b	.L44
 557              	.LVL67:
 558              	.L45:
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 559              		.loc 1 578 0
 560 002a 2268     		ldr	r2, [r4]
 561 002c 1A40     		ands	r2, r3
 562 002e 9342     		cmp	r3, r2
 563 0030 03D0     		beq	.L51
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 564              		.loc 1 560 0
 565 0032 0022     		movs	r2, #0
 566 0034 16E0     		b	.L46
 567              	.L50:
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 568              		.loc 1 571 0
 569 0036 0122     		movs	r2, #1
 570 0038 14E0     		b	.L46
 571              	.L51:
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 572              		.loc 1 581 0
 573 003a 0122     		movs	r2, #1
 574 003c 12E0     		b	.L46
 575              	.LVL68:
 576              	.L48:
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 577              		.loc 1 605 0
 578 003e 8021     		movs	r1, #128
 579              	.LVL69:
 580 0040 8904     		lsls	r1, r1, #18
 581 0042 2368     		ldr	r3, [r4]
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 25


 582              	.LVL70:
 583 0044 1943     		orrs	r1, r3
 584 0046 FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 585              	.LVL71:
 586              	.L47:
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 587              		.loc 1 560 0
 588 004a 3800     		movs	r0, r7
 589              	.LVL72:
 590              	.L44:
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 591              		.loc 1 556 0
 592 004c B042     		cmp	r0, r6
 593 004e 0FD0     		beq	.L53
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 594              		.loc 1 558 0
 595 0050 4768     		ldr	r7, [r0, #4]
 596              	.LVL73:
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 597              		.loc 1 559 0
 598 0052 0168     		ldr	r1, [r0]
 599              	.LVL74:
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 600              		.loc 1 564 0
 601 0054 0B02     		lsls	r3, r1, #8
 602 0056 1B0A     		lsrs	r3, r3, #8
 603              	.LVL75:
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 604              		.loc 1 566 0
 605 0058 4A01     		lsls	r2, r1, #5
 606 005a E6D4     		bmi	.L45
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 607              		.loc 1 569 0
 608 005c 2268     		ldr	r2, [r4]
 609 005e 1A42     		tst	r2, r3
 610 0060 E9D1     		bne	.L50
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 611              		.loc 1 560 0
 612 0062 0022     		movs	r2, #0
 613              	.L46:
 614              	.LVL76:
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 615              		.loc 1 588 0
 616 0064 002A     		cmp	r2, #0
 617 0066 F0D0     		beq	.L47
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 618              		.loc 1 591 0
 619 0068 CA01     		lsls	r2, r1, #7
 620 006a E8D5     		bpl	.L48
 621              	.LVL77:
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 622              		.loc 1 593 0
 623 006c 1D43     		orrs	r5, r3
 624              	.LVL78:
 625 006e E6E7     		b	.L48
 626              	.LVL79:
 627              	.L53:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 26


 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 628              		.loc 1 616 0
 629 0070 2368     		ldr	r3, [r4]
 630 0072 AB43     		bics	r3, r5
 631 0074 2360     		str	r3, [r4]
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 632              		.loc 1 618 0
 633 0076 FFF7FEFF 		bl	xTaskResumeAll
 634              	.LVL80:
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 635              		.loc 1 620 0
 636 007a 2068     		ldr	r0, [r4]
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 637              		.loc 1 621 0
 638              		@ sp needed
 639              	.LVL81:
 640              	.LVL82:
 641              	.LVL83:
 642 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 643              		.cfi_endproc
 644              	.LFE5:
 646              		.section	.text.xEventGroupSync,"ax",%progbits
 647              		.align	1
 648              		.global	xEventGroupSync
 649              		.syntax unified
 650              		.code	16
 651              		.thumb_func
 652              		.fpu softvfp
 654              	xEventGroupSync:
 655              	.LFB1:
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 656              		.loc 1 209 0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 8
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              	.LVL84:
 661 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 662              	.LCFI7:
 663              		.cfi_def_cfa_offset 20
 664              		.cfi_offset 4, -20
 665              		.cfi_offset 5, -16
 666              		.cfi_offset 6, -12
 667              		.cfi_offset 7, -8
 668              		.cfi_offset 14, -4
 669 0002 83B0     		sub	sp, sp, #12
 670              	.LCFI8:
 671              		.cfi_def_cfa_offset 32
 672 0004 0600     		movs	r6, r0
 673 0006 0191     		str	r1, [sp, #4]
 674 0008 1500     		movs	r5, r2
 675 000a 1F00     		movs	r7, r3
 676              	.LVL85:
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 677              		.loc 1 215 0
 678 000c 130E     		lsrs	r3, r2, #24
 679              	.LVL86:
 680 000e 01D0     		beq	.L55
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 27


 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 681              		.loc 1 215 0 is_stmt 0 discriminator 1
 682              		.syntax divided
 683              	@ 215 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 684 0010 72B6     		 cpsid i 
 685              	@ 0 "" 2
 686              		.thumb
 687              		.syntax unified
 688              	.L56:
 689 0012 FEE7     		b	.L56
 690              	.L55:
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 691              		.loc 1 216 0 is_stmt 1
 692 0014 002A     		cmp	r2, #0
 693 0016 01D1     		bne	.L57
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 694              		.loc 1 216 0 is_stmt 0 discriminator 1
 695              		.syntax divided
 696              	@ 216 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 697 0018 72B6     		 cpsid i 
 698              	@ 0 "" 2
 699              		.thumb
 700              		.syntax unified
 701              	.L58:
 702 001a FEE7     		b	.L58
 703              	.L57:
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 704              		.loc 1 219 0 is_stmt 1
 705 001c FFF7FEFF 		bl	xTaskGetSchedulerState
 706              	.LVL87:
 707 0020 0028     		cmp	r0, #0
 708 0022 06D1     		bne	.L69
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 709              		.loc 1 219 0 is_stmt 0 discriminator 2
 710 0024 002F     		cmp	r7, #0
 711 0026 06D1     		bne	.L70
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 712              		.loc 1 219 0
 713 0028 0123     		movs	r3, #1
 714              	.L59:
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 715              		.loc 1 219 0 discriminator 6
 716 002a 002B     		cmp	r3, #0
 717 002c 05D1     		bne	.L60
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 718              		.loc 1 219 0 discriminator 7
 719              		.syntax divided
 720              	@ 219 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 721 002e 72B6     		 cpsid i 
 722              	@ 0 "" 2
 723              		.thumb
 724              		.syntax unified
 725              	.L61:
 726 0030 FEE7     		b	.L61
 727              	.L69:
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 728              		.loc 1 219 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 28


 729 0032 0123     		movs	r3, #1
 730 0034 F9E7     		b	.L59
 731              	.L70:
 732 0036 0023     		movs	r3, #0
 733 0038 F7E7     		b	.L59
 734              	.L60:
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 735              		.loc 1 223 0 is_stmt 1
 736 003a FFF7FEFF 		bl	vTaskSuspendAll
 737              	.LVL88:
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 738              		.loc 1 225 0
 739 003e 3468     		ldr	r4, [r6]
 740              	.LVL89:
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 741              		.loc 1 227 0
 742 0040 0199     		ldr	r1, [sp, #4]
 743 0042 3000     		movs	r0, r6
 744 0044 FFF7FEFF 		bl	xEventGroupSetBits
 745              	.LVL90:
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 746              		.loc 1 229 0
 747 0048 019B     		ldr	r3, [sp, #4]
 748 004a 1C43     		orrs	r4, r3
 749              	.LVL91:
 750 004c 2300     		movs	r3, r4
 751 004e 2B40     		ands	r3, r5
 752 0050 9D42     		cmp	r5, r3
 753 0052 21D1     		bne	.L62
 754              	.LVL92:
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 755              		.loc 1 236 0
 756 0054 3368     		ldr	r3, [r6]
 757 0056 AB43     		bics	r3, r5
 758 0058 3360     		str	r3, [r6]
 759              	.LVL93:
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 760              		.loc 1 238 0
 761 005a 0027     		movs	r7, #0
 762              	.LVL94:
 763              	.L63:
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 764              		.loc 1 265 0
 765 005c FFF7FEFF 		bl	xTaskResumeAll
 766              	.LVL95:
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 767              		.loc 1 267 0
 768 0060 002F     		cmp	r7, #0
 769 0062 16D0     		beq	.L54
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 770              		.loc 1 269 0
 771 0064 0028     		cmp	r0, #0
 772 0066 01D1     		bne	.L66
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 773              		.loc 1 271 0
 774 0068 FFF7FEFF 		bl	vPortYield
 775              	.LVL96:
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 29


 776              	.L66:
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 777              		.loc 1 282 0
 778 006c FFF7FEFF 		bl	uxTaskResetEventItemValue
 779              	.LVL97:
 780 0070 0400     		movs	r4, r0
 781              	.LVL98:
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 782              		.loc 1 284 0
 783 0072 8301     		lsls	r3, r0, #6
 784 0074 0BD4     		bmi	.L67
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 785              		.loc 1 287 0
 786 0076 FFF7FEFF 		bl	vPortEnterCritical
 787              	.LVL99:
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 788              		.loc 1 289 0
 789 007a 3468     		ldr	r4, [r6]
 790              	.LVL100:
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 791              		.loc 1 295 0
 792 007c 2300     		movs	r3, r4
 793 007e 2B40     		ands	r3, r5
 794 0080 9D42     		cmp	r5, r3
 795 0082 02D1     		bne	.L68
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 796              		.loc 1 297 0
 797 0084 2300     		movs	r3, r4
 798 0086 AB43     		bics	r3, r5
 799 0088 3360     		str	r3, [r6]
 800              	.L68:
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 801              		.loc 1 304 0
 802 008a FFF7FEFF 		bl	vPortExitCritical
 803              	.LVL101:
 804              	.L67:
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 805              		.loc 1 315 0
 806 008e 2402     		lsls	r4, r4, #8
 807              	.LVL102:
 808 0090 240A     		lsrs	r4, r4, #8
 809              	.LVL103:
 810              	.L54:
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 811              		.loc 1 321 0
 812 0092 2000     		movs	r0, r4
 813 0094 03B0     		add	sp, sp, #12
 814              		@ sp needed
 815              	.LVL104:
 816              	.LVL105:
 817              	.LVL106:
 818              	.LVL107:
 819 0096 F0BD     		pop	{r4, r5, r6, r7, pc}
 820              	.LVL108:
 821              	.L62:
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 822              		.loc 1 242 0
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 30


 823 0098 002F     		cmp	r7, #0
 824 009a 08D0     		beq	.L64
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 825              		.loc 1 249 0
 826 009c A021     		movs	r1, #160
 827 009e C904     		lsls	r1, r1, #19
 828 00a0 2943     		orrs	r1, r5
 829 00a2 301D     		adds	r0, r6, #4
 830 00a4 3A00     		movs	r2, r7
 831 00a6 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 832              	.LVL109:
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 833              		.loc 1 255 0
 834 00aa 0024     		movs	r4, #0
 835 00ac D6E7     		b	.L63
 836              	.LVL110:
 837              	.L64:
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 838              		.loc 1 261 0
 839 00ae 3468     		ldr	r4, [r6]
 840              	.LVL111:
 841 00b0 D4E7     		b	.L63
 842              		.cfi_endproc
 843              	.LFE1:
 845              		.section	.text.vEventGroupDelete,"ax",%progbits
 846              		.align	1
 847              		.global	vEventGroupDelete
 848              		.syntax unified
 849              		.code	16
 850              		.thumb_func
 851              		.fpu softvfp
 853              	vEventGroupDelete:
 854              	.LFB6:
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 855              		.loc 1 625 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              	.LVL112:
 860 0000 10B5     		push	{r4, lr}
 861              	.LCFI9:
 862              		.cfi_def_cfa_offset 8
 863              		.cfi_offset 4, -8
 864              		.cfi_offset 14, -4
 865 0002 0400     		movs	r4, r0
 866              	.LVL113:
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 867              		.loc 1 629 0
 868 0004 FFF7FEFF 		bl	vTaskSuspendAll
 869              	.LVL114:
 870              	.L72:
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 871              		.loc 1 633 0
 872 0008 6368     		ldr	r3, [r4, #4]
 873 000a 002B     		cmp	r3, #0
 874 000c 0BD0     		beq	.L76
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 31


 875              		.loc 1 637 0
 876 000e 2069     		ldr	r0, [r4, #16]
 877 0010 2300     		movs	r3, r4
 878 0012 0C33     		adds	r3, r3, #12
 879 0014 9842     		cmp	r0, r3
 880 0016 04D0     		beq	.L77
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 881              		.loc 1 638 0
 882 0018 8021     		movs	r1, #128
 883 001a 8904     		lsls	r1, r1, #18
 884 001c FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 885              	.LVL115:
 886 0020 F2E7     		b	.L72
 887              	.L77:
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 888              		.loc 1 637 0 discriminator 1
 889              		.syntax divided
 890              	@ 637 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 891 0022 72B6     		 cpsid i 
 892              	@ 0 "" 2
 893              		.thumb
 894              		.syntax unified
 895              	.L74:
 896 0024 FEE7     		b	.L74
 897              	.L76:
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 898              		.loc 1 645 0
 899 0026 2000     		movs	r0, r4
 900 0028 FFF7FEFF 		bl	vPortFree
 901              	.LVL116:
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 902              		.loc 1 662 0
 903 002c FFF7FEFF 		bl	xTaskResumeAll
 904              	.LVL117:
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 905              		.loc 1 663 0
 906              		@ sp needed
 907              	.LVL118:
 908 0030 10BD     		pop	{r4, pc}
 909              		.cfi_endproc
 910              	.LFE6:
 912              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 913              		.align	1
 914              		.global	vEventGroupSetBitsCallback
 915              		.syntax unified
 916              		.code	16
 917              		.thumb_func
 918              		.fpu softvfp
 920              	vEventGroupSetBitsCallback:
 921              	.LFB7:
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 922              		.loc 1 669 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926              	.LVL119:
 927 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 32


 928              	.LCFI10:
 929              		.cfi_def_cfa_offset 8
 930              		.cfi_offset 4, -8
 931              		.cfi_offset 14, -4
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 932              		.loc 1 670 0
 933 0002 FFF7FEFF 		bl	xEventGroupSetBits
 934              	.LVL120:
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 935              		.loc 1 671 0
 936              		@ sp needed
 937 0006 10BD     		pop	{r4, pc}
 938              		.cfi_endproc
 939              	.LFE7:
 941              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 942              		.align	1
 943              		.global	vEventGroupClearBitsCallback
 944              		.syntax unified
 945              		.code	16
 946              		.thumb_func
 947              		.fpu softvfp
 949              	vEventGroupClearBitsCallback:
 950              	.LFB8:
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 951              		.loc 1 677 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 0
 954              		@ frame_needed = 0, uses_anonymous_args = 0
 955              	.LVL121:
 956 0000 10B5     		push	{r4, lr}
 957              	.LCFI11:
 958              		.cfi_def_cfa_offset 8
 959              		.cfi_offset 4, -8
 960              		.cfi_offset 14, -4
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 961              		.loc 1 678 0
 962 0002 FFF7FEFF 		bl	xEventGroupClearBits
 963              	.LVL122:
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 964              		.loc 1 679 0
 965              		@ sp needed
 966 0006 10BD     		pop	{r4, pc}
 967              		.cfi_endproc
 968              	.LFE8:
 970              		.text
 971              	.Letext0:
 972              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 973              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 974              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 975              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\lib\\gcc\\arm-none-eab
 976              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 977              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 978              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q1-update\\arm-none-eabi\\include
 979              		.file 9 "Inc/FreeRTOSConfig.h"
 980              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM0/portmacro.h"
 981              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 982              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 33


 983              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 984              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s 			page 34


DEFINED SYMBOLS
                            *ABS*:00000000 event_groups.c
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:16     .text.prvTestWaitCondition:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:22     .text.prvTestWaitCondition:00000000 prvTestWaitCondition
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:70     .text.xEventGroupCreate:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:77     .text.xEventGroupCreate:00000000 xEventGroupCreate
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:113    .text.xEventGroupWaitBits:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:120    .text.xEventGroupWaitBits:00000000 xEventGroupWaitBits
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:372    .text.xEventGroupClearBits:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:379    .text.xEventGroupClearBits:00000000 xEventGroupClearBits
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:446    .text.xEventGroupGetBitsFromISR:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:453    .text.xEventGroupGetBitsFromISR:00000000 xEventGroupGetBitsFromISR
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:485    .text.xEventGroupSetBits:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:492    .text.xEventGroupSetBits:00000000 xEventGroupSetBits
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:647    .text.xEventGroupSync:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:654    .text.xEventGroupSync:00000000 xEventGroupSync
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:846    .text.vEventGroupDelete:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:853    .text.vEventGroupDelete:00000000 vEventGroupDelete
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:913    .text.vEventGroupSetBitsCallback:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:920    .text.vEventGroupSetBitsCallback:00000000 vEventGroupSetBitsCallback
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:942    .text.vEventGroupClearBitsCallback:00000000 $t
C:\Users\Raj\AppData\Local\Temp\ccmzRGMB.s:949    .text.vEventGroupClearBitsCallback:00000000 vEventGroupClearBitsCallback
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
vPortYield
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskPlaceOnUnorderedEventList
ulSetInterruptMaskFromISR
vClearInterruptMaskFromISR
xTaskRemoveFromUnorderedEventList
vPortFree
